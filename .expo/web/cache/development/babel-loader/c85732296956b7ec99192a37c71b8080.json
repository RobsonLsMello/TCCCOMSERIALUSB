{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as React from 'react';\nimport { useState, useEffect } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport PermissionsAndroid from \"react-native-web/dist/exports/PermissionsAndroid\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport FS from 'react-native-fs';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction scanDir(pathOfDirToScan) {\n  var data,\n    readedFilesAndDir,\n    _args2 = arguments;\n  return _regeneratorRuntime.async(function scanDir$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          data = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {\n            directory: [],\n            files: []\n          };\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(FS.readDir(pathOfDirToScan));\n        case 3:\n          readedFilesAndDir = _context2.sent;\n          readedFilesAndDir.map(function _callee(eachItem) {\n            var directoryPath;\n            return _regeneratorRuntime.async(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    if (!eachItem.isDirectory()) {\n                      _context.next = 8;\n                      break;\n                    }\n                    directoryPath = pathOfDirToScan + '/' + eachItem.name;\n                    data.directory.push(directoryPath);\n                    _context.next = 5;\n                    return _regeneratorRuntime.awrap(scanDir(directoryPath, data));\n                  case 5:\n                    data = _context.sent;\n                    _context.next = 9;\n                    break;\n                  case 8:\n                    data.files.push(pathOfDirToScan + '/' + eachItem.name);\n                  case 9:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          });\n          console.log(data);\n          return _context2.abrupt(\"return\", data);\n        case 7:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nfunction FsTest(_ref) {\n  var navigation = _ref.navigation;\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    downloadsFolder = _useState2[0],\n    setDownloadsFolder = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    documentsFolder = _useState4[0],\n    setDocumentsFolder = _useState4[1];\n  var _useState5 = useState(''),\n    _useState6 = _slicedToArray(_useState5, 2),\n    externalDirectory = _useState6[0],\n    setExternalDirectory = _useState6[1];\n  useEffect(function () {\n    setDownloadsFolder(FS.DownloadDirectoryPath);\n    setDocumentsFolder(FS.DocumentDirectoryPath);\n    setExternalDirectory(FS.ExternalStorageDirectoryPath);\n  }, []);\n  return _jsxs(View, {\n    style: {},\n    children: [_jsx(TouchableHighlight, {\n      onPress: function onPress() {\n        scanDir(\"/dev\");\n      },\n      children: _jsx(Text, {\n        children: \"Ler Pastas\"\n      })\n    }), _jsxs(Text, {\n      children: [\" Downloads Folder: \", downloadsFolder]\n    }), _jsxs(Text, {\n      children: [\"Documents folder: \", documentsFolder]\n    }), _jsxs(Text, {\n      children: [\"External storage: \", externalDirectory]\n    })]\n  });\n}\nexport default FsTest;","map":{"version":3,"names":["React","useState","useEffect","FS","scanDir","pathOfDirToScan","data","directory","files","readDir","readedFilesAndDir","map","eachItem","isDirectory","directoryPath","name","push","console","log","FsTest","navigation","downloadsFolder","setDownloadsFolder","documentsFolder","setDocumentsFolder","externalDirectory","setExternalDirectory","DownloadDirectoryPath","DocumentDirectoryPath","ExternalStorageDirectoryPath"],"sources":["C:/Users/ROBSONLUCASSILVEIRAM/Documents/tcc/src/views/FsTest.js"],"sourcesContent":["import * as React from 'react';\r\nimport { useState, useEffect } from \"react\";\r\nimport { Text, View,TextInput, StyleSheet, PermissionsAndroid, TouchableHighlight } from 'react-native';\r\nimport FS from 'react-native-fs';\r\n\r\n\r\nasync function scanDir(pathOfDirToScan, data = {directory: [], files: []}) {\r\n    const readedFilesAndDir = await FS.readDir(pathOfDirToScan);\r\n  \r\n    readedFilesAndDir.map(async eachItem=> {\r\n      if (eachItem.isDirectory()) {\r\n        const directoryPath = pathOfDirToScan + '/' + eachItem.name;\r\n        data.directory.push(directoryPath);\r\n        data = await scanDir(directoryPath, data);\r\n      } else {\r\n        data.files.push(pathOfDirToScan + '/' + eachItem.name);\r\n      }\r\n    });\r\n    console.log(data);\r\n    return data;\r\n  }\r\nfunction FsTest({navigation}){\r\n    const [downloadsFolder, setDownloadsFolder] = useState('');\r\n    const [documentsFolder, setDocumentsFolder] = useState('');\r\n    const [externalDirectory, setExternalDirectory] = useState('');\r\n\r\n    useEffect(() => {\r\n        setDownloadsFolder(FS.DownloadDirectoryPath);\r\n        setDocumentsFolder(FS.DocumentDirectoryPath); //alternative to MainBundleDirectory.\r\n        setExternalDirectory(FS.ExternalStorageDirectoryPath);\r\n    }, []);\r\n\r\n    return(\r\n        \r\n        <View style={{}}> \r\n            <TouchableHighlight onPress={()=>{scanDir(\"/dev\")}}>\r\n                <Text>Ler Pastas</Text>\r\n            </TouchableHighlight>\r\n            <Text> Downloads Folder: {downloadsFolder}</Text>\r\n            <Text>Documents folder: {documentsFolder}</Text>\r\n            <Text>External storage: {externalDirectory}</Text>\r\n        </View>\r\n  )\r\n}\r\n\r\n\r\n\r\nexport default FsTest"],"mappings":";;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAE5C,OAAOC,EAAE,MAAM,iBAAiB;AAAC;AAAA;AAGjC,SAAeC,OAAO,CAACC,eAAe;EAAA;IAAA;IAAA;EAAA;IAAA;MAAA;QAAA;UAAEC,IAAI,8DAAG;YAACC,SAAS,EAAE,EAAE;YAAEC,KAAK,EAAE;UAAE,CAAC;UAAA;UAAA,iCACrCL,EAAE,CAACM,OAAO,CAACJ,eAAe,CAAC;QAAA;UAArDK,iBAAiB;UAEvBA,iBAAiB,CAACC,GAAG,CAAC,iBAAMC,QAAQ;YAAA;YAAA;cAAA;gBAAA;kBAAA;oBAAA,KAC9BA,QAAQ,CAACC,WAAW,EAAE;sBAAA;sBAAA;oBAAA;oBAClBC,aAAa,GAAGT,eAAe,GAAG,GAAG,GAAGO,QAAQ,CAACG,IAAI;oBAC3DT,IAAI,CAACC,SAAS,CAACS,IAAI,CAACF,aAAa,CAAC;oBAAC;oBAAA,iCACtBV,OAAO,CAACU,aAAa,EAAER,IAAI,CAAC;kBAAA;oBAAzCA,IAAI;oBAAA;oBAAA;kBAAA;oBAEJA,IAAI,CAACE,KAAK,CAACQ,IAAI,CAACX,eAAe,GAAG,GAAG,GAAGO,QAAQ,CAACG,IAAI,CAAC;kBAAC;kBAAA;oBAAA;gBAAA;cAAA;YAAA;UAAA,CAE1D,CAAC;UACFE,OAAO,CAACC,GAAG,CAACZ,IAAI,CAAC;UAAC,kCACXA,IAAI;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;AAEf,SAASa,MAAM,OAAc;EAAA,IAAZC,UAAU,QAAVA,UAAU;EACvB,gBAA8CnB,QAAQ,CAAC,EAAE,CAAC;IAAA;IAAnDoB,eAAe;IAAEC,kBAAkB;EAC1C,iBAA8CrB,QAAQ,CAAC,EAAE,CAAC;IAAA;IAAnDsB,eAAe;IAAEC,kBAAkB;EAC1C,iBAAkDvB,QAAQ,CAAC,EAAE,CAAC;IAAA;IAAvDwB,iBAAiB;IAAEC,oBAAoB;EAE9CxB,SAAS,CAAC,YAAM;IACZoB,kBAAkB,CAACnB,EAAE,CAACwB,qBAAqB,CAAC;IAC5CH,kBAAkB,CAACrB,EAAE,CAACyB,qBAAqB,CAAC;IAC5CF,oBAAoB,CAACvB,EAAE,CAAC0B,4BAA4B,CAAC;EACzD,CAAC,EAAE,EAAE,CAAC;EAEN,OAEI,MAAC,IAAI;IAAC,KAAK,EAAE,CAAC,CAAE;IAAA,WACZ,KAAC,kBAAkB;MAAC,OAAO,EAAE,mBAAI;QAACzB,OAAO,CAAC,MAAM,CAAC;MAAA,CAAE;MAAA,UAC/C,KAAC,IAAI;QAAA;MAAA;IAAkB,EACN,EACrB,MAAC,IAAI;MAAA,kCAAqBiB,eAAe;IAAA,EAAQ,EACjD,MAAC,IAAI;MAAA,iCAAoBE,eAAe;IAAA,EAAQ,EAChD,MAAC,IAAI;MAAA,iCAAoBE,iBAAiB;IAAA,EAAQ;EAAA,EAC/C;AAEf;AAIA,eAAeN,MAAM"},"metadata":{},"sourceType":"module"}