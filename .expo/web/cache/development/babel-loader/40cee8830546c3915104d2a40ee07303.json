{"ast":null,"code":"'use strict';\n\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nexport var Service = function () {\n  function Service(nativeService, manager) {\n    _classCallCheck(this, Service);\n\n    _extends(this, nativeService, {\n      _manager: manager\n    });\n  }\n\n  _createClass(Service, [{\n    key: \"characteristics\",\n    value: function characteristics() {\n      return this._manager._characteristicsForService(this.id);\n    }\n  }, {\n    key: \"descriptorsForCharacteristic\",\n    value: function descriptorsForCharacteristic(characteristicUUID) {\n      return this._manager._descriptorsForService(this.id, characteristicUUID);\n    }\n  }, {\n    key: \"readCharacteristic\",\n    value: function readCharacteristic(characteristicUUID, transactionId) {\n      return this._manager._readCharacteristicForService(this.id, characteristicUUID, transactionId);\n    }\n  }, {\n    key: \"writeCharacteristicWithResponse\",\n    value: function writeCharacteristicWithResponse(characteristicUUID, valueBase64, transactionId) {\n      return this._manager._writeCharacteristicWithResponseForService(this.id, characteristicUUID, valueBase64, transactionId);\n    }\n  }, {\n    key: \"writeCharacteristicWithoutResponse\",\n    value: function writeCharacteristicWithoutResponse(characteristicUUID, valueBase64, transactionId) {\n      return this._manager._writeCharacteristicWithoutResponseForService(this.id, characteristicUUID, valueBase64, transactionId);\n    }\n  }, {\n    key: \"monitorCharacteristic\",\n    value: function monitorCharacteristic(characteristicUUID, listener, transactionId) {\n      return this._manager._monitorCharacteristicForService(this.id, characteristicUUID, listener, transactionId);\n    }\n  }, {\n    key: \"readDescriptorForCharacteristic\",\n    value: function readDescriptorForCharacteristic(characteristicUUID, descriptorUUID, transactionId) {\n      return _regeneratorRuntime.async(function readDescriptorForCharacteristic$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", this._manager._readDescriptorForService(this.id, characteristicUUID, descriptorUUID, transactionId));\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"writeDescriptorForCharacteristic\",\n    value: function writeDescriptorForCharacteristic(characteristicUUID, descriptorUUID, valueBase64, transactionId) {\n      return _regeneratorRuntime.async(function writeDescriptorForCharacteristic$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", this._manager._writeDescriptorForService(this.id, characteristicUUID, descriptorUUID, valueBase64, transactionId));\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }]);\n\n  return Service;\n}();","map":{"version":3,"names":["Service","nativeService","manager","_manager","_characteristicsForService","id","characteristicUUID","_descriptorsForService","transactionId","_readCharacteristicForService","valueBase64","_writeCharacteristicWithResponseForService","_writeCharacteristicWithoutResponseForService","listener","_monitorCharacteristicForService","descriptorUUID","_readDescriptorForService","_writeDescriptorForService"],"sources":["C:/Users/ROBSONLUCASSILVEIRAM/Documents/tcc/node_modules/react-native-ble-plx/src/Service.js"],"sourcesContent":["// @flow\n'use strict'\n\nimport type { BleManager } from './BleManager'\nimport type { BleError } from './BleError'\nimport type { Characteristic } from './Characteristic'\nimport type { Descriptor } from './Descriptor'\nimport type { NativeService } from './BleModule'\nimport type { DeviceId, Identifier, Base64, UUID, Subscription, TransactionId } from './TypeDefinition'\n\n/**\n * Service object.\n */\nexport class Service implements NativeService {\n  /**\n   * Internal BLE Manager handle\n   * @private\n   */\n  _manager: BleManager\n  /**\n   * Service unique identifier\n   */\n  id: Identifier\n  /**\n   * Service UUID\n   */\n  uuid: UUID\n  /**\n   * Device's ID to which service belongs\n   */\n  deviceID: DeviceId\n  /**\n   * Value indicating whether the type of service is primary or secondary.\n   */\n  isPrimary: boolean\n\n  /**\n   * Private constructor used to create {@link Service} object.\n   *\n   * @param {NativeService} nativeService NativeService properties to be copied.\n   * @param {BleManager} manager Current BleManager instance.\n   * @private\n   * @ignore\n   */\n  constructor(nativeService: NativeService, manager: BleManager) {\n    Object.assign(this, nativeService, { _manager: manager })\n  }\n\n  /**\n   * {@link #blemanagercharacteristicsfordevice|bleManager.characteristicsForDevice()} with partially filled arguments.\n   *\n   * @returns {Promise<Array<Characteristic>>} Promise which emits array of {@link Characteristic} objects which are\n   * discovered for this service.\n   */\n  characteristics(): Promise<Array<Characteristic>> {\n    return this._manager._characteristicsForService(this.id)\n  }\n\n  /**\n   * {@link #blemanagerdescriptorsfordevice|bleManager.descriptorsForDevice()} with partially filled arguments.\n   *\n   * @param {UUID} characteristicUUID {@link Characteristic} UUID.\n   * @returns {Promise<Array<Descriptor>>} Promise which emits array of {@link Descriptor} objects which are\n   * discovered for this {@link Service} in specified {@link Characteristic}.\n   */\n  descriptorsForCharacteristic(characteristicUUID: UUID): Promise<Array<Descriptor>> {\n    return this._manager._descriptorsForService(this.id, characteristicUUID)\n  }\n\n  /**\n   * {@link #blemanagerreadcharacteristicfordevice|bleManager.readCharacteristicForDevice()} with partially filled arguments.\n   *\n   * @param {UUID} characteristicUUID {@link Characteristic} UUID.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|bleManager.cancelTransaction()} function.\n   * @returns {Promise<Characteristic>} Promise which emits first {@link Characteristic} object matching specified\n   * UUID path. Latest value of {@link Characteristic} will be stored inside returned object.\n   */\n  readCharacteristic(characteristicUUID: UUID, transactionId: ?TransactionId): Promise<Characteristic> {\n    return this._manager._readCharacteristicForService(this.id, characteristicUUID, transactionId)\n  }\n\n  /**\n   * {@link #blemanagerwritecharacteristicwithresponsefordevice|bleManager.writeCharacteristicWithResponseForDevice()} with partially filled arguments.\n   *\n   * @param {UUID} characteristicUUID {@link Characteristic} UUID.\n   * @param {Base64} valueBase64 Value in Base64 format.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|bleManager.cancelTransaction()} function.\n   * @returns {Promise<Characteristic>} Promise which emits first {@link Characteristic} object matching specified\n   * UUID path. Latest value of characteristic may not be stored inside returned object.\n   */\n  writeCharacteristicWithResponse(\n    characteristicUUID: UUID,\n    valueBase64: Base64,\n    transactionId: ?TransactionId\n  ): Promise<Characteristic> {\n    return this._manager._writeCharacteristicWithResponseForService(\n      this.id,\n      characteristicUUID,\n      valueBase64,\n      transactionId\n    )\n  }\n\n  /**\n   * {@link #blemanagerwritecharacteristicwithoutresponsefordevice|bleManager.writeCharacteristicWithoutResponseForDevice()} with partially filled arguments.\n   *\n   * @param {UUID} characteristicUUID {@link Characteristic} UUID.\n   * @param {Base64} valueBase64 Value in Base64 format.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|bleManager.cancelTransaction()} function.\n   * @returns {Promise<Characteristic>} Promise which emits first {@link Characteristic} object matching specified\n   * UUID path. Latest value of characteristic may not be stored inside returned object.\n   */\n  writeCharacteristicWithoutResponse(\n    characteristicUUID: UUID,\n    valueBase64: Base64,\n    transactionId: ?TransactionId\n  ): Promise<Characteristic> {\n    return this._manager._writeCharacteristicWithoutResponseForService(\n      this.id,\n      characteristicUUID,\n      valueBase64,\n      transactionId\n    )\n  }\n\n  /**\n   * {@link #blemanagermonitorcharacteristicfordevice|bleManager.monitorCharacteristicForDevice()} with partially filled arguments.\n   *\n   * @param {UUID} characteristicUUID - {@link Characteristic} UUID.\n   * @param {function(error: ?BleError, characteristic: ?Characteristic)} listener callback which emits\n   * {@link Characteristic} objects with modified value for each notification.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|bleManager.cancelTransaction()} function.\n   * @returns {Subscription} Subscription on which `remove()` function can be called to unsubscribe.\n   */\n  monitorCharacteristic(\n    characteristicUUID: UUID,\n    listener: (error: ?BleError, characteristic: ?Characteristic) => void,\n    transactionId: ?TransactionId\n  ): Subscription {\n    return this._manager._monitorCharacteristicForService(this.id, characteristicUUID, listener, transactionId)\n  }\n\n  /**\n   * {@link #blemanagerreaddescriptorfordevice|bleManager.readDescriptorForDevice()} with partially filled arguments.\n   *\n   * @param {UUID} characteristicUUID {@link Characteristic} UUID.\n   * @param {UUID} descriptorUUID {@link Descriptor} UUID.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|cancelTransaction()} function.\n   * @returns {Promise<Descriptor>} Promise which emits first {@link Descriptor} object matching specified\n   * UUID paths. Latest value of {@link Descriptor} will be stored inside returned object.\n   */\n  async readDescriptorForCharacteristic(\n    characteristicUUID: UUID,\n    descriptorUUID: UUID,\n    transactionId: ?TransactionId\n  ): Promise<Descriptor> {\n    return this._manager._readDescriptorForService(this.id, characteristicUUID, descriptorUUID, transactionId)\n  }\n\n  /**\n   * {@link #blemanagerwritedescriptorfordevice|bleManager.writeDescriptorForDevice()} with partially filled arguments.\n   *\n   * @param {UUID} characteristicUUID Characteristic UUID\n   * @param {UUID} descriptorUUID Descriptor UUID\n   * @param {Base64} valueBase64 Value to be set coded in Base64\n   * @param {?TransactionId} transactionId Transaction handle used to cancel operation\n   * @returns {Promise<Descriptor>} Descriptor which saved passed value.\n   */\n  async writeDescriptorForCharacteristic(\n    characteristicUUID: UUID,\n    descriptorUUID: UUID,\n    valueBase64: Base64,\n    transactionId: ?TransactionId\n  ): Promise<Descriptor> {\n    return this._manager._writeDescriptorForService(\n      this.id,\n      characteristicUUID,\n      descriptorUUID,\n      valueBase64,\n      transactionId\n    )\n  }\n}\n"],"mappings":"AACA;;;;;;AAYA,WAAaA,OAAb;EA+BE,iBAAYC,aAAZ,EAA0CC,OAA1C,EAA+D;IAAA;;IAC7D,SAAc,IAAd,EAAoBD,aAApB,EAAmC;MAAEE,QAAQ,EAAED;IAAZ,CAAnC;EACD;;EAjCH;IAAA;IAAA,OAyCE,2BAAkD;MAChD,OAAO,KAAKC,QAAL,CAAcC,0BAAd,CAAyC,KAAKC,EAA9C,CAAP;IACD;EA3CH;IAAA;IAAA,OAoDE,sCAA6BC,kBAA7B,EAAmF;MACjF,OAAO,KAAKH,QAAL,CAAcI,sBAAd,CAAqC,KAAKF,EAA1C,EAA8CC,kBAA9C,CAAP;IACD;EAtDH;IAAA;IAAA,OAiEE,4BAAmBA,kBAAnB,EAA6CE,aAA7C,EAAqG;MACnG,OAAO,KAAKL,QAAL,CAAcM,6BAAd,CAA4C,KAAKJ,EAAjD,EAAqDC,kBAArD,EAAyEE,aAAzE,CAAP;IACD;EAnEH;IAAA;IAAA,OA+EE,yCACEF,kBADF,EAEEI,WAFF,EAGEF,aAHF,EAI2B;MACzB,OAAO,KAAKL,QAAL,CAAcQ,0CAAd,CACL,KAAKN,EADA,EAELC,kBAFK,EAGLI,WAHK,EAILF,aAJK,CAAP;IAMD;EA1FH;IAAA;IAAA,OAsGE,4CACEF,kBADF,EAEEI,WAFF,EAGEF,aAHF,EAI2B;MACzB,OAAO,KAAKL,QAAL,CAAcS,6CAAd,CACL,KAAKP,EADA,EAELC,kBAFK,EAGLI,WAHK,EAILF,aAJK,CAAP;IAMD;EAjHH;IAAA;IAAA,OA6HE,+BACEF,kBADF,EAEEO,QAFF,EAGEL,aAHF,EAIgB;MACd,OAAO,KAAKL,QAAL,CAAcW,gCAAd,CAA+C,KAAKT,EAApD,EAAwDC,kBAAxD,EAA4EO,QAA5E,EAAsFL,aAAtF,CAAP;IACD;EAnIH;IAAA;IAAA,OA+IE,yCACEF,kBADF,EAEES,cAFF,EAGEP,aAHF;MAAA;QAAA;UAAA;YAAA;cAAA,iCAKS,KAAKL,QAAL,CAAca,yBAAd,CAAwC,KAAKX,EAA7C,EAAiDC,kBAAjD,EAAqES,cAArE,EAAqFP,aAArF,CALT;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EA/IF;IAAA;IAAA,OAgKE,0CACEF,kBADF,EAEES,cAFF,EAGEL,WAHF,EAIEF,aAJF;MAAA;QAAA;UAAA;YAAA;cAAA,kCAMS,KAAKL,QAAL,CAAcc,0BAAd,CACL,KAAKZ,EADA,EAELC,kBAFK,EAGLS,cAHK,EAILL,WAJK,EAKLF,aALK,CANT;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EAhKF;;EAAA;AAAA"},"metadata":{},"sourceType":"module"}