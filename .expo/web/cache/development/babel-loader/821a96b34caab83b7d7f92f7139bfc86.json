{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar _OrientationLockAPITo, _OrientationWebToAPI;\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { SyntheticPlatformEmitter, Platform } from 'expo-modules-core';\nimport { getOrientationLockAsync, getOrientationAsync } from \"./ScreenOrientation\";\nimport { Orientation, OrientationLock, WebOrientationLock, WebOrientation } from \"./ScreenOrientation.types\";\nvar OrientationLockAPIToWeb = (_OrientationLockAPITo = {}, _defineProperty(_OrientationLockAPITo, OrientationLock.DEFAULT, WebOrientationLock.NATURAL), _defineProperty(_OrientationLockAPITo, OrientationLock.ALL, WebOrientationLock.ANY), _defineProperty(_OrientationLockAPITo, OrientationLock.PORTRAIT, WebOrientationLock.PORTRAIT), _defineProperty(_OrientationLockAPITo, OrientationLock.PORTRAIT_UP, WebOrientationLock.PORTRAIT_PRIMARY), _defineProperty(_OrientationLockAPITo, OrientationLock.PORTRAIT_DOWN, WebOrientationLock.PORTRAIT_SECONDARY), _defineProperty(_OrientationLockAPITo, OrientationLock.LANDSCAPE, WebOrientationLock.LANDSCAPE), _defineProperty(_OrientationLockAPITo, OrientationLock.LANDSCAPE_LEFT, WebOrientationLock.LANDSCAPE_PRIMARY), _defineProperty(_OrientationLockAPITo, OrientationLock.LANDSCAPE_RIGHT, WebOrientationLock.LANDSCAPE_SECONDARY), _OrientationLockAPITo);\nvar OrientationWebToAPI = (_OrientationWebToAPI = {}, _defineProperty(_OrientationWebToAPI, WebOrientation.PORTRAIT_PRIMARY, Orientation.PORTRAIT_UP), _defineProperty(_OrientationWebToAPI, WebOrientation.PORTRAIT_SECONDARY, Orientation.PORTRAIT_DOWN), _defineProperty(_OrientationWebToAPI, WebOrientation.LANDSCAPE_PRIMARY, Orientation.LANDSCAPE_LEFT), _defineProperty(_OrientationWebToAPI, WebOrientation.LANDSCAPE_SECONDARY, Orientation.LANDSCAPE_RIGHT), _OrientationWebToAPI);\nvar screen = Platform.canUseViewport ? window.screen : {};\nvar orientation = Platform.canUseViewport ? screen.orientation || screen.msOrientation || null : null;\n\nfunction emitOrientationEvent() {\n  var _await$Promise$all, _await$Promise$all2, orientationLock, orientation;\n\n  return _regeneratorRuntime.async(function emitOrientationEvent$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(Promise.all([getOrientationLockAsync(), getOrientationAsync()]));\n\n        case 2:\n          _await$Promise$all = _context.sent;\n          _await$Promise$all2 = _slicedToArray(_await$Promise$all, 2);\n          orientationLock = _await$Promise$all2[0];\n          orientation = _await$Promise$all2[1];\n          SyntheticPlatformEmitter.emit('expoDidUpdateDimensions', {\n            orientationLock: orientationLock,\n            orientationInfo: {\n              orientation: orientation\n            }\n          });\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nif (Platform.canUseEventListeners) {\n  if (orientation && orientation.addEventListener) {\n    orientation.addEventListener('change', emitOrientationEvent);\n  } else {\n    window.addEventListener('orientationchange', emitOrientationEvent);\n  }\n}\n\nfunction _convertToLegacyOrientationLock(orientationLock) {\n  switch (orientationLock) {\n    case WebOrientationLock.UNKNOWN:\n      throw new Error(\"expo-screen-orientation: WebOrientationLock.UNKNOWN is not a valid lock to be converted.\");\n\n    case WebOrientationLock.ANY:\n      return ['portrait', 'landscape'];\n\n    case WebOrientationLock.NATURAL:\n      return 'default';\n\n    default:\n      return orientationLock;\n  }\n}\n\nfunction _lockAsync(webOrientationLock) {\n  var legacyLock, lockOrientation, isSuccess;\n  return _regeneratorRuntime.async(function _lockAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!(webOrientationLock === WebOrientationLock.UNKNOWN)) {\n            _context2.next = 2;\n            break;\n          }\n\n          throw new Error(\"expo-screen-orientation: WebOrientationLock.UNKNOWN is not a valid lock that can be applied to the device.\");\n\n        case 2:\n          if (!(screen.orientation && screen.orientation.lock)) {\n            _context2.next = 7;\n            break;\n          }\n\n          _context2.next = 5;\n          return _regeneratorRuntime.awrap(screen.orientation.lock(webOrientationLock));\n\n        case 5:\n          _context2.next = 16;\n          break;\n\n        case 7:\n          if (!(screen['lockOrientation'] || screen['mozLockOrientation'] || screen['msLockOrientation'])) {\n            _context2.next = 15;\n            break;\n          }\n\n          legacyLock = _convertToLegacyOrientationLock(webOrientationLock);\n          lockOrientation = screen['lockOrientation'] || screen['mozLockOrientation'] || screen['msLockOrientation'];\n          isSuccess = lockOrientation.call(screen, legacyLock);\n\n          if (isSuccess) {\n            _context2.next = 13;\n            break;\n          }\n\n          throw new Error(\"Applying orientation lock: \" + JSON.stringify(webOrientationLock) + \" to device was denied\");\n\n        case 13:\n          _context2.next = 16;\n          break;\n\n        case 15:\n          throw new Error(\"expo-screen-orientation: The browser doesn't support locking screen orientation.\");\n\n        case 16:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nvar _lastWebOrientationLock = WebOrientationLock.UNKNOWN;\nexport default {\n  get name() {\n    return 'ExpoScreenOrientation';\n  },\n\n  supportsOrientationLockAsync: function supportsOrientationLockAsync(orientationLock) {\n    return function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              return _context3.abrupt(\"return\", orientationLock in OrientationLockAPIToWeb);\n\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  getPlatformOrientationLockAsync: function getPlatformOrientationLockAsync() {\n    return function _callee2() {\n      return _regeneratorRuntime.async(function _callee2$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              return _context4.abrupt(\"return\", _lastWebOrientationLock);\n\n            case 1:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  getOrientationAsync: function getOrientationAsync() {\n    return function _callee3() {\n      var webOrientation;\n      return _regeneratorRuntime.async(function _callee3$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              webOrientation = screen['msOrientation'] || (screen.orientation || screen['mozOrientation'] || {}).type;\n\n              if (webOrientation) {\n                _context5.next = 3;\n                break;\n              }\n\n              return _context5.abrupt(\"return\", Orientation.UNKNOWN);\n\n            case 3:\n              return _context5.abrupt(\"return\", OrientationWebToAPI[webOrientation]);\n\n            case 4:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  lockAsync: function lockAsync(orientationLock) {\n    return function _callee4() {\n      var webOrientationLock;\n      return _regeneratorRuntime.async(function _callee4$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              webOrientationLock = OrientationLockAPIToWeb[orientationLock];\n\n              if (webOrientationLock) {\n                _context6.next = 3;\n                break;\n              }\n\n              throw new TypeError(\"Invalid Orientation Lock: \" + orientationLock);\n\n            case 3:\n              _context6.next = 5;\n              return _regeneratorRuntime.awrap(_lockAsync(webOrientationLock));\n\n            case 5:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  lockPlatformAsync: function lockPlatformAsync(webOrientationLock) {\n    return function _callee5() {\n      return _regeneratorRuntime.async(function _callee5$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return _regeneratorRuntime.awrap(_lockAsync(webOrientationLock));\n\n            case 2:\n              _lastWebOrientationLock = webOrientationLock;\n\n            case 3:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  unlockAsync: function unlockAsync() {\n    return function _callee6() {\n      var unlockOrientation, isSuccess;\n      return _regeneratorRuntime.async(function _callee6$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              if (!(screen.orientation && screen.orientation.unlock)) {\n                _context8.next = 4;\n                break;\n              }\n\n              screen.orientation.unlock();\n              _context8.next = 12;\n              break;\n\n            case 4:\n              if (!(screen['unlockOrientation'] || screen['mozUnlockOrientation'] || screen['msUnlockOrientation'])) {\n                _context8.next = 11;\n                break;\n              }\n\n              unlockOrientation = screen['unlockOrientation'] || screen['mozUnlockOrientation'] || screen['msUnlockOrientation'];\n              isSuccess = unlockOrientation.call(screen);\n\n              if (isSuccess) {\n                _context8.next = 9;\n                break;\n              }\n\n              throw new Error(\"Unlocking screen orientation on device was denied\");\n\n            case 9:\n              _context8.next = 12;\n              break;\n\n            case 11:\n              throw new Error(\"expo-screen-orientation: The browser doesn't support unlocking screen orientation.\");\n\n            case 12:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  }\n};","map":{"version":3,"mappings":"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","names":["SyntheticPlatformEmitter","Platform","getOrientationLockAsync","getOrientationAsync","Orientation","OrientationLock","WebOrientationLock","WebOrientation","OrientationLockAPIToWeb","DEFAULT","NATURAL","ALL","ANY","PORTRAIT","PORTRAIT_UP","PORTRAIT_PRIMARY","PORTRAIT_DOWN","PORTRAIT_SECONDARY","LANDSCAPE","LANDSCAPE_LEFT","LANDSCAPE_PRIMARY","LANDSCAPE_RIGHT","LANDSCAPE_SECONDARY","OrientationWebToAPI","screen","canUseViewport","window","orientation","msOrientation","emitOrientationEvent","Promise","all","orientationLock","emit","orientationInfo","canUseEventListeners","addEventListener","_convertToLegacyOrientationLock","UNKNOWN","Error","_lockAsync","webOrientationLock","lock","legacyLock","lockOrientation","isSuccess","call","JSON","stringify","_lastWebOrientationLock","name","supportsOrientationLockAsync","getPlatformOrientationLockAsync","webOrientation","type","lockAsync","TypeError","lockPlatformAsync","unlockAsync","unlock","unlockOrientation"],"sourceRoot":"","sources":["../src/ExpoScreenOrientation.web.ts"],"sourcesContent":["import { SyntheticPlatformEmitter, Platform } from 'expo-modules-core';\n\nimport { getOrientationLockAsync, getOrientationAsync } from './ScreenOrientation';\nimport {\n  Orientation,\n  OrientationLock,\n  WebOrientationLock,\n  WebOrientation,\n} from './ScreenOrientation.types';\n\nconst OrientationLockAPIToWeb: {\n  [lock: string]: WebOrientationLock;\n} = {\n  [OrientationLock.DEFAULT]: WebOrientationLock.NATURAL,\n  [OrientationLock.ALL]: WebOrientationLock.ANY,\n  [OrientationLock.PORTRAIT]: WebOrientationLock.PORTRAIT,\n  [OrientationLock.PORTRAIT_UP]: WebOrientationLock.PORTRAIT_PRIMARY,\n  [OrientationLock.PORTRAIT_DOWN]: WebOrientationLock.PORTRAIT_SECONDARY,\n  [OrientationLock.LANDSCAPE]: WebOrientationLock.LANDSCAPE,\n  [OrientationLock.LANDSCAPE_LEFT]: WebOrientationLock.LANDSCAPE_PRIMARY,\n  [OrientationLock.LANDSCAPE_RIGHT]: WebOrientationLock.LANDSCAPE_SECONDARY,\n};\n\nconst OrientationWebToAPI: {\n  [orientationWeb: string]: Orientation;\n} = {\n  [WebOrientation.PORTRAIT_PRIMARY]: Orientation.PORTRAIT_UP,\n  [WebOrientation.PORTRAIT_SECONDARY]: Orientation.PORTRAIT_DOWN,\n  [WebOrientation.LANDSCAPE_PRIMARY]: Orientation.LANDSCAPE_LEFT,\n  [WebOrientation.LANDSCAPE_SECONDARY]: Orientation.LANDSCAPE_RIGHT,\n};\n\ndeclare const window: Window;\n\nconst screen: Screen = Platform.canUseViewport ? window.screen : ({} as Screen);\nconst orientation: ScreenOrientation | null = Platform.canUseViewport\n  ? screen.orientation || (screen as any).msOrientation || null\n  : null;\n\nasync function emitOrientationEvent() {\n  const [orientationLock, orientation] = await Promise.all([\n    getOrientationLockAsync(),\n    getOrientationAsync(),\n  ]);\n  SyntheticPlatformEmitter.emit('expoDidUpdateDimensions', {\n    orientationLock,\n    orientationInfo: { orientation },\n  });\n}\n\nif (Platform.canUseEventListeners) {\n  if (orientation && orientation.addEventListener) {\n    orientation.addEventListener('change', emitOrientationEvent);\n  } else {\n    window.addEventListener('orientationchange', emitOrientationEvent);\n  }\n}\n\nfunction _convertToLegacyOrientationLock(orientationLock: WebOrientationLock): string | string[] {\n  switch (orientationLock) {\n    case WebOrientationLock.UNKNOWN:\n      throw new Error(\n        `expo-screen-orientation: WebOrientationLock.UNKNOWN is not a valid lock to be converted.`\n      );\n    case WebOrientationLock.ANY:\n      return ['portrait', 'landscape'];\n    case WebOrientationLock.NATURAL:\n      return 'default';\n    default:\n      return orientationLock;\n  }\n}\n\nasync function _lockAsync(webOrientationLock: WebOrientationLock): Promise<void> {\n  if (webOrientationLock === WebOrientationLock.UNKNOWN) {\n    throw new Error(\n      `expo-screen-orientation: WebOrientationLock.UNKNOWN is not a valid lock that can be applied to the device.`\n    );\n  }\n  if (screen.orientation && screen.orientation.lock) {\n    await screen.orientation.lock(webOrientationLock);\n  } else if (\n    screen['lockOrientation'] ||\n    screen['mozLockOrientation'] ||\n    screen['msLockOrientation']\n  ) {\n    const legacyLock = _convertToLegacyOrientationLock(webOrientationLock);\n    const lockOrientation =\n      screen['lockOrientation'] || screen['mozLockOrientation'] || screen['msLockOrientation'];\n    // correct `this` context must be passed in otherwise method call is disallowed by browser\n    const isSuccess = lockOrientation.call(screen, legacyLock);\n    if (!isSuccess) {\n      throw new Error(\n        `Applying orientation lock: ${JSON.stringify(webOrientationLock)} to device was denied`\n      );\n    }\n  } else {\n    throw new Error(\n      `expo-screen-orientation: The browser doesn't support locking screen orientation.`\n    );\n  }\n}\n\nlet _lastWebOrientationLock: WebOrientationLock = WebOrientationLock.UNKNOWN;\n\nexport default {\n  get name(): string {\n    return 'ExpoScreenOrientation';\n  },\n  async supportsOrientationLockAsync(orientationLock: OrientationLock): Promise<boolean> {\n    return orientationLock in OrientationLockAPIToWeb;\n  },\n  async getPlatformOrientationLockAsync(): Promise<WebOrientationLock> {\n    return _lastWebOrientationLock;\n  },\n  async getOrientationAsync(): Promise<Orientation> {\n    const webOrientation =\n      screen['msOrientation'] || (screen.orientation || screen['mozOrientation'] || {}).type;\n    if (!webOrientation) {\n      return Orientation.UNKNOWN;\n    }\n    return OrientationWebToAPI[webOrientation];\n  },\n  async lockAsync(orientationLock: OrientationLock): Promise<void> {\n    const webOrientationLock = OrientationLockAPIToWeb[orientationLock];\n    if (!webOrientationLock) {\n      throw new TypeError(`Invalid Orientation Lock: ${orientationLock}`);\n    }\n    await _lockAsync(webOrientationLock);\n  },\n  async lockPlatformAsync(webOrientationLock: WebOrientationLock): Promise<void> {\n    await _lockAsync(webOrientationLock);\n    _lastWebOrientationLock = webOrientationLock;\n  },\n  async unlockAsync(): Promise<void> {\n    if (screen.orientation && screen.orientation.unlock) {\n      screen.orientation.unlock();\n    } else if (\n      screen['unlockOrientation'] ||\n      screen['mozUnlockOrientation'] ||\n      screen['msUnlockOrientation']\n    ) {\n      const unlockOrientation =\n        screen['unlockOrientation'] ||\n        screen['mozUnlockOrientation'] ||\n        screen['msUnlockOrientation'];\n      // correct `this` context must be passed in otherwise method call is disallowed by browser\n      const isSuccess = unlockOrientation.call(screen);\n      if (!isSuccess) {\n        throw new Error(`Unlocking screen orientation on device was denied`);\n      }\n    } else {\n      throw new Error(\n        `expo-screen-orientation: The browser doesn't support unlocking screen orientation.`\n      );\n    }\n  },\n};\n"]},"metadata":{},"sourceType":"module"}