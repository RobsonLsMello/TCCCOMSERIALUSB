{"ast":null,"code":"'use strict';\n\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nexport var Descriptor = function () {\n  function Descriptor(nativeDescriptor, manager) {\n    _classCallCheck(this, Descriptor);\n\n    _extends(this, nativeDescriptor, {\n      _manager: manager\n    });\n  }\n\n  _createClass(Descriptor, [{\n    key: \"read\",\n    value: function read(transactionId) {\n      return _regeneratorRuntime.async(function read$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", this._manager._readDescriptor(this.id, transactionId));\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"write\",\n    value: function write(valueBase64, transactionId) {\n      return _regeneratorRuntime.async(function write$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", this._manager._writeDescriptor(this.id, valueBase64, transactionId));\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }]);\n\n  return Descriptor;\n}();","map":{"version":3,"names":["Descriptor","nativeDescriptor","manager","_manager","transactionId","_readDescriptor","id","valueBase64","_writeDescriptor"],"sources":["C:/Users/ROBSONLUCASSILVEIRAM/Documents/tcc/node_modules/react-native-ble-plx/src/Descriptor.js"],"sourcesContent":["// @flow\n'use strict'\n\nimport type { BleManager } from './BleManager'\nimport type { NativeDescriptor } from './BleModule'\nimport type { DeviceId, Identifier, UUID, TransactionId, Base64 } from './TypeDefinition'\n\n/**\n * Descriptor object.\n */\nexport class Descriptor implements NativeDescriptor {\n  /**\n   * Internal BLE Manager handle\n   * @private\n   */\n  _manager: BleManager\n  /**\n   * Descriptor unique identifier\n   */\n  id: Identifier\n  /**\n   * Descriptor UUID\n   */\n  uuid: UUID\n  /**\n   * Characteristic's ID to which descriptor belongs\n   */\n  characteristicID: Identifier\n  /**\n   * Characteristic's UUID to which descriptor belongs\n   */\n  characteristicUUID: UUID\n  /**\n   * Service's ID to which descriptor belongs\n   */\n  serviceID: Identifier\n  /**\n   * Service's UUID to which descriptor belongs\n   */\n  serviceUUID: UUID\n  /**\n   * Device's ID to which descriptor belongs\n   */\n  deviceID: DeviceId\n  /**\n   * Descriptor value if present\n   */\n  value: ?Base64\n\n  /**\n   * Private constructor used to create instance of {@link Descriptor}.\n   * @param {NativeDescriptor} nativeDescriptor NativeDescriptor\n   * @param {BleManager} manager BleManager\n   * @private\n   */\n  constructor(nativeDescriptor: NativeDescriptor, manager: BleManager) {\n    Object.assign(this, nativeDescriptor, { _manager: manager })\n  }\n\n  /**\n   * {@link #blemanagerreaddescriptorfordevice|bleManager.readDescriptorForDevice()} with partially filled arguments.\n   *\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|cancelTransaction()} function.\n   * @returns {Promise<Descriptor>} Promise which emits first {@link Descriptor} object matching specified\n   * UUID paths. Latest value of {@link Descriptor} will be stored inside returned object.\n   */\n  async read(transactionId: ?TransactionId): Promise<Descriptor> {\n    return this._manager._readDescriptor(this.id, transactionId)\n  }\n\n  /**\n   * {@link #blemanagerwritedescriptorfordevice|bleManager.writeDescriptorForDevice()} with partially filled arguments.\n   *\n   * @param {Base64} valueBase64 Value to be set coded in Base64\n   * @param {?TransactionId} transactionId Transaction handle used to cancel operation\n   * @returns {Promise<Descriptor>} Descriptor which saved passed value.\n   */\n  async write(valueBase64: Base64, transactionId: ?TransactionId): Promise<Descriptor> {\n    return this._manager._writeDescriptor(this.id, valueBase64, transactionId)\n  }\n}\n"],"mappings":"AACA;;;;;;AASA,WAAaA,UAAb;EA6CE,oBAAYC,gBAAZ,EAAgDC,OAAhD,EAAqE;IAAA;;IACnE,SAAc,IAAd,EAAoBD,gBAApB,EAAsC;MAAEE,QAAQ,EAAED;IAAZ,CAAtC;EACD;;EA/CH;IAAA;IAAA,OAyDE,cAAWE,aAAX;MAAA;QAAA;UAAA;YAAA;cAAA,iCACS,KAAKD,QAAL,CAAcE,eAAd,CAA8B,KAAKC,EAAnC,EAAuCF,aAAvC,CADT;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EAzDF;IAAA;IAAA,OAoEE,eAAYG,WAAZ,EAAiCH,aAAjC;MAAA;QAAA;UAAA;YAAA;cAAA,kCACS,KAAKD,QAAL,CAAcK,gBAAd,CAA+B,KAAKF,EAApC,EAAwCC,WAAxC,EAAqDH,aAArD,CADT;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EApEF;;EAAA;AAAA"},"metadata":{},"sourceType":"module"}