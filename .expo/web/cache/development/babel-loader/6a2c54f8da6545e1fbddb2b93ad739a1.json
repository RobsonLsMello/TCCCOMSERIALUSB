{"ast":null,"code":"'use strict';\n\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { Device } from \"./Device\";\nimport { Service } from \"./Service\";\nimport { Characteristic } from \"./Characteristic\";\nimport { Descriptor } from \"./Descriptor\";\nimport { State, LogLevel, ConnectionPriority } from \"./TypeDefinition\";\nimport { BleModule, EventEmitter } from \"./BleModule\";\nimport { parseBleError, BleError, BleErrorCode, BleErrorCodeMessage, BleATTErrorCode, BleAndroidErrorCode, BleIOSErrorCode } from \"./BleError\";\nexport var BleManager = function () {\n  function BleManager() {\n    var _this = this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, BleManager);\n\n    this._eventEmitter = new EventEmitter(BleModule);\n    this._uniqueId = 0;\n    this._activePromises = {};\n    this._activeSubscriptions = {};\n    var restoreStateFunction = options.restoreStateFunction;\n\n    if (restoreStateFunction != null && options.restoreStateIdentifier != null) {\n      this._activeSubscriptions[this._nextUniqueID()] = this._eventEmitter.addListener(BleModule.RestoreStateEvent, function (nativeRestoredState) {\n        if (nativeRestoredState == null) {\n          restoreStateFunction(null);\n          return;\n        }\n\n        restoreStateFunction({\n          connectedPeripherals: nativeRestoredState.connectedPeripherals.map(function (nativeDevice) {\n            return new Device(nativeDevice, _this);\n          })\n        });\n      });\n    }\n\n    this._errorCodesToMessagesMapping = options.errorCodesToMessagesMapping ? options.errorCodesToMessagesMapping : BleErrorCodeMessage;\n    BleModule.createClient(options.restoreStateIdentifier || null);\n  }\n\n  _createClass(BleManager, [{\n    key: \"_destroyPromises\",\n    value: function _destroyPromises() {\n      var destroyedError = new BleError({\n        errorCode: BleErrorCode.BluetoothManagerDestroyed,\n        attErrorCode: null,\n        iosErrorCode: null,\n        androidErrorCode: null,\n        reason: null\n      }, this._errorCodesToMessagesMapping);\n\n      for (var _id in this._activePromises) {\n        this._activePromises[_id](destroyedError);\n      }\n    }\n  }, {\n    key: \"_destroySubscriptions\",\n    value: function _destroySubscriptions() {\n      for (var _id2 in this._activeSubscriptions) {\n        this._activeSubscriptions[_id2].remove();\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      BleModule.destroyClient();\n\n      if (this._scanEventSubscription != null) {\n        this._scanEventSubscription.remove();\n\n        this._scanEventSubscription = null;\n      }\n\n      this._destroySubscriptions();\n\n      this._destroyPromises();\n    }\n  }, {\n    key: \"_nextUniqueID\",\n    value: function _nextUniqueID() {\n      this._uniqueId += 1;\n      return this._uniqueId.toString();\n    }\n  }, {\n    key: \"_callPromise\",\n    value: function _callPromise(promise) {\n      var _this2 = this;\n\n      var id, destroyPromise, value;\n      return _regeneratorRuntime.async(function _callPromise$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              id = this._nextUniqueID();\n              _context.prev = 1;\n              destroyPromise = new Promise(function (resolve, reject) {\n                _this2._activePromises[id] = reject;\n              });\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(Promise.race([destroyPromise, promise]));\n\n            case 5:\n              value = _context.sent;\n              delete this._activePromises[id];\n              return _context.abrupt(\"return\", value);\n\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](1);\n              delete this._activePromises[id];\n              throw parseBleError(_context.t0.message, this._errorCodesToMessagesMapping);\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, [[1, 10]], Promise);\n    }\n  }, {\n    key: \"setLogLevel\",\n    value: function setLogLevel(logLevel) {\n      BleModule.setLogLevel(logLevel);\n    }\n  }, {\n    key: \"logLevel\",\n    value: function logLevel() {\n      return this._callPromise(BleModule.logLevel());\n    }\n  }, {\n    key: \"cancelTransaction\",\n    value: function cancelTransaction(transactionId) {\n      BleModule.cancelTransaction(transactionId);\n    }\n  }, {\n    key: \"enable\",\n    value: function enable(transactionId) {\n      return _regeneratorRuntime.async(function enable$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!transactionId) {\n                transactionId = this._nextUniqueID();\n              }\n\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(this._callPromise(BleModule.enable(transactionId)));\n\n            case 3:\n              return _context2.abrupt(\"return\", this);\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"disable\",\n    value: function disable(transactionId) {\n      return _regeneratorRuntime.async(function disable$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!transactionId) {\n                transactionId = this._nextUniqueID();\n              }\n\n              _context3.next = 3;\n              return _regeneratorRuntime.awrap(this._callPromise(BleModule.disable(transactionId)));\n\n            case 3:\n              return _context3.abrupt(\"return\", this);\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"state\",\n    value: function state() {\n      return this._callPromise(BleModule.state());\n    }\n  }, {\n    key: \"onStateChange\",\n    value: function onStateChange(listener) {\n      var _this3 = this;\n\n      var emitCurrentState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      var subscription = this._eventEmitter.addListener(BleModule.StateChangeEvent, listener);\n\n      var id = this._nextUniqueID();\n\n      var wrappedSubscription;\n\n      if (emitCurrentState) {\n        var cancelled = false;\n\n        this._callPromise(this.state()).then(function (currentState) {\n          if (!cancelled) {\n            listener(currentState);\n          }\n        });\n\n        wrappedSubscription = {\n          remove: function remove() {\n            if (_this3._activeSubscriptions[id] != null) {\n              cancelled = true;\n              delete _this3._activeSubscriptions[id];\n              subscription.remove();\n            }\n          }\n        };\n      } else {\n        wrappedSubscription = {\n          remove: function remove() {\n            if (_this3._activeSubscriptions[id] != null) {\n              delete _this3._activeSubscriptions[id];\n              subscription.remove();\n            }\n          }\n        };\n      }\n\n      this._activeSubscriptions[id] = wrappedSubscription;\n      return wrappedSubscription;\n    }\n  }, {\n    key: \"startDeviceScan\",\n    value: function startDeviceScan(UUIDs, options, listener) {\n      var _this4 = this;\n\n      this.stopDeviceScan();\n\n      var scanListener = function scanListener(_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            error = _ref2[0],\n            nativeDevice = _ref2[1];\n\n        listener(error ? parseBleError(error, _this4._errorCodesToMessagesMapping) : null, nativeDevice ? new Device(nativeDevice, _this4) : null);\n      };\n\n      this._scanEventSubscription = this._eventEmitter.addListener(BleModule.ScanEvent, scanListener);\n      BleModule.startDeviceScan(UUIDs, options);\n    }\n  }, {\n    key: \"stopDeviceScan\",\n    value: function stopDeviceScan() {\n      if (this._scanEventSubscription != null) {\n        this._scanEventSubscription.remove();\n\n        this._scanEventSubscription = null;\n      }\n\n      BleModule.stopDeviceScan();\n    }\n  }, {\n    key: \"requestConnectionPriorityForDevice\",\n    value: function requestConnectionPriorityForDevice(deviceIdentifier, connectionPriority, transactionId) {\n      var nativeDevice;\n      return _regeneratorRuntime.async(function requestConnectionPriorityForDevice$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (!transactionId) {\n                transactionId = this._nextUniqueID();\n              }\n\n              _context4.next = 3;\n              return _regeneratorRuntime.awrap(this._callPromise(BleModule.requestConnectionPriorityForDevice(deviceIdentifier, connectionPriority, transactionId)));\n\n            case 3:\n              nativeDevice = _context4.sent;\n              return _context4.abrupt(\"return\", new Device(nativeDevice, this));\n\n            case 5:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"readRSSIForDevice\",\n    value: function readRSSIForDevice(deviceIdentifier, transactionId) {\n      var nativeDevice;\n      return _regeneratorRuntime.async(function readRSSIForDevice$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              if (!transactionId) {\n                transactionId = this._nextUniqueID();\n              }\n\n              _context5.next = 3;\n              return _regeneratorRuntime.awrap(this._callPromise(BleModule.readRSSIForDevice(deviceIdentifier, transactionId)));\n\n            case 3:\n              nativeDevice = _context5.sent;\n              return _context5.abrupt(\"return\", new Device(nativeDevice, this));\n\n            case 5:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"requestMTUForDevice\",\n    value: function requestMTUForDevice(deviceIdentifier, mtu, transactionId) {\n      var nativeDevice;\n      return _regeneratorRuntime.async(function requestMTUForDevice$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              if (!transactionId) {\n                transactionId = this._nextUniqueID();\n              }\n\n              _context6.next = 3;\n              return _regeneratorRuntime.awrap(this._callPromise(BleModule.requestMTUForDevice(deviceIdentifier, mtu, transactionId)));\n\n            case 3:\n              nativeDevice = _context6.sent;\n              return _context6.abrupt(\"return\", new Device(nativeDevice, this));\n\n            case 5:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"devices\",\n    value: function devices(deviceIdentifiers) {\n      var _this5 = this;\n\n      var nativeDevices;\n      return _regeneratorRuntime.async(function devices$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return _regeneratorRuntime.awrap(this._callPromise(BleModule.devices(deviceIdentifiers)));\n\n            case 2:\n              nativeDevices = _context7.sent;\n              return _context7.abrupt(\"return\", nativeDevices.map(function (nativeDevice) {\n                return new Device(nativeDevice, _this5);\n              }));\n\n            case 4:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"connectedDevices\",\n    value: function connectedDevices(serviceUUIDs) {\n      var _this6 = this;\n\n      var nativeDevices;\n      return _regeneratorRuntime.async(function connectedDevices$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.next = 2;\n              return _regeneratorRuntime.awrap(this._callPromise(BleModule.connectedDevices(serviceUUIDs)));\n\n            case 2:\n              nativeDevices = _context8.sent;\n              return _context8.abrupt(\"return\", nativeDevices.map(function (nativeDevice) {\n                return new Device(nativeDevice, _this6);\n              }));\n\n            case 4:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"connectToDevice\",\n    value: function connectToDevice(deviceIdentifier, options) {\n      var nativeDevice;\n      return _regeneratorRuntime.async(function connectToDevice$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.next = 2;\n              return _regeneratorRuntime.awrap(this._callPromise(BleModule.connectToDevice(deviceIdentifier, options)));\n\n            case 2:\n              nativeDevice = _context9.sent;\n              return _context9.abrupt(\"return\", new Device(nativeDevice, this));\n\n            case 4:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"cancelDeviceConnection\",\n    value: function cancelDeviceConnection(deviceIdentifier) {\n      var nativeDevice;\n      return _regeneratorRuntime.async(function cancelDeviceConnection$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              _context10.next = 2;\n              return _regeneratorRuntime.awrap(this._callPromise(BleModule.cancelDeviceConnection(deviceIdentifier)));\n\n            case 2:\n              nativeDevice = _context10.sent;\n              return _context10.abrupt(\"return\", new Device(nativeDevice, this));\n\n            case 4:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"onDeviceDisconnected\",\n    value: function onDeviceDisconnected(deviceIdentifier, listener) {\n      var _this7 = this;\n\n      var disconnectionListener = function disconnectionListener(_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n            error = _ref4[0],\n            nativeDevice = _ref4[1];\n\n        if (deviceIdentifier !== nativeDevice.id) return;\n        listener(error ? parseBleError(error, _this7._errorCodesToMessagesMapping) : null, new Device(nativeDevice, _this7));\n      };\n\n      var subscription = this._eventEmitter.addListener(BleModule.DisconnectionEvent, disconnectionListener);\n\n      var id = this._nextUniqueID();\n\n      var wrappedSubscription = {\n        remove: function remove() {\n          if (_this7._activeSubscriptions[id] != null) {\n            delete _this7._activeSubscriptions[id];\n            subscription.remove();\n          }\n        }\n      };\n      this._activeSubscriptions[id] = wrappedSubscription;\n      return wrappedSubscription;\n    }\n  }, {\n    key: \"isDeviceConnected\",\n    value: function isDeviceConnected(deviceIdentifier) {\n      return this._callPromise(BleModule.isDeviceConnected(deviceIdentifier));\n    }\n  }, {\n    key: \"discoverAllServicesAndCharacteristicsForDevice\",\n    value: function discoverAllServicesAndCharacteristicsForDevice(deviceIdentifier, transactionId) {\n      var nativeDevice;\n      return _regeneratorRuntime.async(function discoverAllServicesAndCharacteristicsForDevice$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              if (!transactionId) {\n                transactionId = this._nextUniqueID();\n              }\n\n              _context11.next = 3;\n              return _regeneratorRuntime.awrap(this._callPromise(BleModule.discoverAllServicesAndCharacteristicsForDevice(deviceIdentifier, transactionId)));\n\n            case 3:\n              nativeDevice = _context11.sent;\n              return _context11.abrupt(\"return\", new Device(nativeDevice, this));\n\n            case 5:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"servicesForDevice\",\n    value: function servicesForDevice(deviceIdentifier) {\n      var _this8 = this;\n\n      var services;\n      return _regeneratorRuntime.async(function servicesForDevice$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              _context12.next = 2;\n              return _regeneratorRuntime.awrap(this._callPromise(BleModule.servicesForDevice(deviceIdentifier)));\n\n            case 2:\n              services = _context12.sent;\n              return _context12.abrupt(\"return\", services.map(function (nativeService) {\n                return new Service(nativeService, _this8);\n              }));\n\n            case 4:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"characteristicsForDevice\",\n    value: function characteristicsForDevice(deviceIdentifier, serviceUUID) {\n      return this._handleCharacteristics(BleModule.characteristicsForDevice(deviceIdentifier, serviceUUID));\n    }\n  }, {\n    key: \"_characteristicsForService\",\n    value: function _characteristicsForService(serviceIdentifier) {\n      return this._handleCharacteristics(BleModule.characteristicsForService(serviceIdentifier));\n    }\n  }, {\n    key: \"_handleCharacteristics\",\n    value: function _handleCharacteristics(characteristicsPromise) {\n      var _this9 = this;\n\n      var characteristics;\n      return _regeneratorRuntime.async(function _handleCharacteristics$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              _context13.next = 2;\n              return _regeneratorRuntime.awrap(this._callPromise(characteristicsPromise));\n\n            case 2:\n              characteristics = _context13.sent;\n              return _context13.abrupt(\"return\", characteristics.map(function (nativeCharacteristic) {\n                return new Characteristic(nativeCharacteristic, _this9);\n              }));\n\n            case 4:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"descriptorsForDevice\",\n    value: function descriptorsForDevice(deviceIdentifier, serviceUUID, characteristicUUID) {\n      return this._handleDescriptors(BleModule.descriptorsForDevice(deviceIdentifier, serviceUUID, characteristicUUID));\n    }\n  }, {\n    key: \"_descriptorsForService\",\n    value: function _descriptorsForService(serviceIdentifier, characteristicUUID) {\n      return this._handleDescriptors(BleModule.descriptorsForService(serviceIdentifier, characteristicUUID));\n    }\n  }, {\n    key: \"_descriptorsForCharacteristic\",\n    value: function _descriptorsForCharacteristic(characteristicIdentifier) {\n      return this._handleDescriptors(BleModule.descriptorsForCharacteristic(characteristicIdentifier));\n    }\n  }, {\n    key: \"_handleDescriptors\",\n    value: function _handleDescriptors(descriptorsPromise) {\n      var _this10 = this;\n\n      var descriptors;\n      return _regeneratorRuntime.async(function _handleDescriptors$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              _context14.next = 2;\n              return _regeneratorRuntime.awrap(this._callPromise(descriptorsPromise));\n\n            case 2:\n              descriptors = _context14.sent;\n              return _context14.abrupt(\"return\", descriptors.map(function (nativeDescriptor) {\n                return new Descriptor(nativeDescriptor, _this10);\n              }));\n\n            case 4:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"readCharacteristicForDevice\",\n    value: function readCharacteristicForDevice(deviceIdentifier, serviceUUID, characteristicUUID, transactionId) {\n      var nativeCharacteristic;\n      return _regeneratorRuntime.async(function readCharacteristicForDevice$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              if (!transactionId) {\n                transactionId = this._nextUniqueID();\n              }\n\n              _context15.next = 3;\n              return _regeneratorRuntime.awrap(this._callPromise(BleModule.readCharacteristicForDevice(deviceIdentifier, serviceUUID, characteristicUUID, transactionId)));\n\n            case 3:\n              nativeCharacteristic = _context15.sent;\n              return _context15.abrupt(\"return\", new Characteristic(nativeCharacteristic, this));\n\n            case 5:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"_readCharacteristicForService\",\n    value: function _readCharacteristicForService(serviceIdentifier, characteristicUUID, transactionId) {\n      var nativeCharacteristic;\n      return _regeneratorRuntime.async(function _readCharacteristicForService$(_context16) {\n        while (1) {\n          switch (_context16.prev = _context16.next) {\n            case 0:\n              if (!transactionId) {\n                transactionId = this._nextUniqueID();\n              }\n\n              _context16.next = 3;\n              return _regeneratorRuntime.awrap(this._callPromise(BleModule.readCharacteristicForService(serviceIdentifier, characteristicUUID, transactionId)));\n\n            case 3:\n              nativeCharacteristic = _context16.sent;\n              return _context16.abrupt(\"return\", new Characteristic(nativeCharacteristic, this));\n\n            case 5:\n            case \"end\":\n              return _context16.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"_readCharacteristic\",\n    value: function _readCharacteristic(characteristicIdentifier, transactionId) {\n      var nativeCharacteristic;\n      return _regeneratorRuntime.async(function _readCharacteristic$(_context17) {\n        while (1) {\n          switch (_context17.prev = _context17.next) {\n            case 0:\n              if (!transactionId) {\n                transactionId = this._nextUniqueID();\n              }\n\n              _context17.next = 3;\n              return _regeneratorRuntime.awrap(this._callPromise(BleModule.readCharacteristic(characteristicIdentifier, transactionId)));\n\n            case 3:\n              nativeCharacteristic = _context17.sent;\n              return _context17.abrupt(\"return\", new Characteristic(nativeCharacteristic, this));\n\n            case 5:\n            case \"end\":\n              return _context17.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"writeCharacteristicWithResponseForDevice\",\n    value: function writeCharacteristicWithResponseForDevice(deviceIdentifier, serviceUUID, characteristicUUID, base64Value, transactionId) {\n      var nativeCharacteristic;\n      return _regeneratorRuntime.async(function writeCharacteristicWithResponseForDevice$(_context18) {\n        while (1) {\n          switch (_context18.prev = _context18.next) {\n            case 0:\n              if (!transactionId) {\n                transactionId = this._nextUniqueID();\n              }\n\n              _context18.next = 3;\n              return _regeneratorRuntime.awrap(this._callPromise(BleModule.writeCharacteristicForDevice(deviceIdentifier, serviceUUID, characteristicUUID, base64Value, true, transactionId)));\n\n            case 3:\n              nativeCharacteristic = _context18.sent;\n              return _context18.abrupt(\"return\", new Characteristic(nativeCharacteristic, this));\n\n            case 5:\n            case \"end\":\n              return _context18.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"_writeCharacteristicWithResponseForService\",\n    value: function _writeCharacteristicWithResponseForService(serviceIdentifier, characteristicUUID, base64Value, transactionId) {\n      var nativeCharacteristic;\n      return _regeneratorRuntime.async(function _writeCharacteristicWithResponseForService$(_context19) {\n        while (1) {\n          switch (_context19.prev = _context19.next) {\n            case 0:\n              if (!transactionId) {\n                transactionId = this._nextUniqueID();\n              }\n\n              _context19.next = 3;\n              return _regeneratorRuntime.awrap(this._callPromise(BleModule.writeCharacteristicForService(serviceIdentifier, characteristicUUID, base64Value, true, transactionId)));\n\n            case 3:\n              nativeCharacteristic = _context19.sent;\n              return _context19.abrupt(\"return\", new Characteristic(nativeCharacteristic, this));\n\n            case 5:\n            case \"end\":\n              return _context19.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"_writeCharacteristicWithResponse\",\n    value: function _writeCharacteristicWithResponse(characteristicIdentifier, base64Value, transactionId) {\n      var nativeCharacteristic;\n      return _regeneratorRuntime.async(function _writeCharacteristicWithResponse$(_context20) {\n        while (1) {\n          switch (_context20.prev = _context20.next) {\n            case 0:\n              if (!transactionId) {\n                transactionId = this._nextUniqueID();\n              }\n\n              _context20.next = 3;\n              return _regeneratorRuntime.awrap(this._callPromise(BleModule.writeCharacteristic(characteristicIdentifier, base64Value, true, transactionId)));\n\n            case 3:\n              nativeCharacteristic = _context20.sent;\n              return _context20.abrupt(\"return\", new Characteristic(nativeCharacteristic, this));\n\n            case 5:\n            case \"end\":\n              return _context20.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"writeCharacteristicWithoutResponseForDevice\",\n    value: function writeCharacteristicWithoutResponseForDevice(deviceIdentifier, serviceUUID, characteristicUUID, base64Value, transactionId) {\n      var nativeCharacteristic;\n      return _regeneratorRuntime.async(function writeCharacteristicWithoutResponseForDevice$(_context21) {\n        while (1) {\n          switch (_context21.prev = _context21.next) {\n            case 0:\n              if (!transactionId) {\n                transactionId = this._nextUniqueID();\n              }\n\n              _context21.next = 3;\n              return _regeneratorRuntime.awrap(this._callPromise(BleModule.writeCharacteristicForDevice(deviceIdentifier, serviceUUID, characteristicUUID, base64Value, false, transactionId)));\n\n            case 3:\n              nativeCharacteristic = _context21.sent;\n              return _context21.abrupt(\"return\", new Characteristic(nativeCharacteristic, this));\n\n            case 5:\n            case \"end\":\n              return _context21.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"_writeCharacteristicWithoutResponseForService\",\n    value: function _writeCharacteristicWithoutResponseForService(serviceIdentifier, characteristicUUID, base64Value, transactionId) {\n      var nativeCharacteristic;\n      return _regeneratorRuntime.async(function _writeCharacteristicWithoutResponseForService$(_context22) {\n        while (1) {\n          switch (_context22.prev = _context22.next) {\n            case 0:\n              if (!transactionId) {\n                transactionId = this._nextUniqueID();\n              }\n\n              _context22.next = 3;\n              return _regeneratorRuntime.awrap(this._callPromise(BleModule.writeCharacteristicForService(serviceIdentifier, characteristicUUID, base64Value, false, transactionId)));\n\n            case 3:\n              nativeCharacteristic = _context22.sent;\n              return _context22.abrupt(\"return\", new Characteristic(nativeCharacteristic, this));\n\n            case 5:\n            case \"end\":\n              return _context22.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"_writeCharacteristicWithoutResponse\",\n    value: function _writeCharacteristicWithoutResponse(characteristicIdentifier, base64Value, transactionId) {\n      var nativeCharacteristic;\n      return _regeneratorRuntime.async(function _writeCharacteristicWithoutResponse$(_context23) {\n        while (1) {\n          switch (_context23.prev = _context23.next) {\n            case 0:\n              if (!transactionId) {\n                transactionId = this._nextUniqueID();\n              }\n\n              _context23.next = 3;\n              return _regeneratorRuntime.awrap(this._callPromise(BleModule.writeCharacteristic(characteristicIdentifier, base64Value, false, transactionId)));\n\n            case 3:\n              nativeCharacteristic = _context23.sent;\n              return _context23.abrupt(\"return\", new Characteristic(nativeCharacteristic, this));\n\n            case 5:\n            case \"end\":\n              return _context23.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"monitorCharacteristicForDevice\",\n    value: function monitorCharacteristicForDevice(deviceIdentifier, serviceUUID, characteristicUUID, listener, transactionId) {\n      var filledTransactionId = transactionId || this._nextUniqueID();\n\n      return this._handleMonitorCharacteristic(BleModule.monitorCharacteristicForDevice(deviceIdentifier, serviceUUID, characteristicUUID, filledTransactionId), filledTransactionId, listener);\n    }\n  }, {\n    key: \"_monitorCharacteristicForService\",\n    value: function _monitorCharacteristicForService(serviceIdentifier, characteristicUUID, listener, transactionId) {\n      var filledTransactionId = transactionId || this._nextUniqueID();\n\n      return this._handleMonitorCharacteristic(BleModule.monitorCharacteristicForService(serviceIdentifier, characteristicUUID, filledTransactionId), filledTransactionId, listener);\n    }\n  }, {\n    key: \"_monitorCharacteristic\",\n    value: function _monitorCharacteristic(characteristicIdentifier, listener, transactionId) {\n      var filledTransactionId = transactionId || this._nextUniqueID();\n\n      return this._handleMonitorCharacteristic(BleModule.monitorCharacteristic(characteristicIdentifier, filledTransactionId), filledTransactionId, listener);\n    }\n  }, {\n    key: \"_handleMonitorCharacteristic\",\n    value: function _handleMonitorCharacteristic(monitorPromise, transactionId, listener) {\n      var _this11 = this;\n\n      var monitorListener = function monitorListener(_ref5) {\n        var _ref6 = _slicedToArray(_ref5, 3),\n            error = _ref6[0],\n            characteristic = _ref6[1],\n            msgTransactionId = _ref6[2];\n\n        if (transactionId !== msgTransactionId) return;\n\n        if (error) {\n          listener(parseBleError(error, _this11._errorCodesToMessagesMapping), null);\n          return;\n        }\n\n        listener(null, new Characteristic(characteristic, _this11));\n      };\n\n      var subscription = this._eventEmitter.addListener(BleModule.ReadEvent, monitorListener);\n\n      var id = this._nextUniqueID();\n\n      var wrappedSubscription = {\n        remove: function remove() {\n          if (_this11._activeSubscriptions[id] != null) {\n            delete _this11._activeSubscriptions[id];\n            subscription.remove();\n          }\n        }\n      };\n      this._activeSubscriptions[id] = wrappedSubscription;\n\n      this._callPromise(monitorPromise).then(function () {\n        wrappedSubscription.remove();\n      }, function (error) {\n        listener(error, null);\n        wrappedSubscription.remove();\n      });\n\n      return {\n        remove: function remove() {\n          BleModule.cancelTransaction(transactionId);\n        }\n      };\n    }\n  }, {\n    key: \"readDescriptorForDevice\",\n    value: function readDescriptorForDevice(deviceIdentifier, serviceUUID, characteristicUUID, descriptorUUID, transactionId) {\n      var nativeDescriptor;\n      return _regeneratorRuntime.async(function readDescriptorForDevice$(_context24) {\n        while (1) {\n          switch (_context24.prev = _context24.next) {\n            case 0:\n              if (!transactionId) {\n                transactionId = this._nextUniqueID();\n              }\n\n              _context24.next = 3;\n              return _regeneratorRuntime.awrap(this._callPromise(BleModule.readDescriptorForDevice(deviceIdentifier, serviceUUID, characteristicUUID, descriptorUUID, transactionId)));\n\n            case 3:\n              nativeDescriptor = _context24.sent;\n              return _context24.abrupt(\"return\", new Descriptor(nativeDescriptor, this));\n\n            case 5:\n            case \"end\":\n              return _context24.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"_readDescriptorForService\",\n    value: function _readDescriptorForService(serviceIdentifier, characteristicUUID, descriptorUUID, transactionId) {\n      var nativeDescriptor;\n      return _regeneratorRuntime.async(function _readDescriptorForService$(_context25) {\n        while (1) {\n          switch (_context25.prev = _context25.next) {\n            case 0:\n              if (!transactionId) {\n                transactionId = this._nextUniqueID();\n              }\n\n              _context25.next = 3;\n              return _regeneratorRuntime.awrap(this._callPromise(BleModule.readDescriptorForService(serviceIdentifier, characteristicUUID, descriptorUUID, transactionId)));\n\n            case 3:\n              nativeDescriptor = _context25.sent;\n              return _context25.abrupt(\"return\", new Descriptor(nativeDescriptor, this));\n\n            case 5:\n            case \"end\":\n              return _context25.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"_readDescriptorForCharacteristic\",\n    value: function _readDescriptorForCharacteristic(characteristicIdentifier, descriptorUUID, transactionId) {\n      var nativeDescriptor;\n      return _regeneratorRuntime.async(function _readDescriptorForCharacteristic$(_context26) {\n        while (1) {\n          switch (_context26.prev = _context26.next) {\n            case 0:\n              if (!transactionId) {\n                transactionId = this._nextUniqueID();\n              }\n\n              _context26.next = 3;\n              return _regeneratorRuntime.awrap(this._callPromise(BleModule.readDescriptorForCharacteristic(characteristicIdentifier, descriptorUUID, transactionId)));\n\n            case 3:\n              nativeDescriptor = _context26.sent;\n              return _context26.abrupt(\"return\", new Descriptor(nativeDescriptor, this));\n\n            case 5:\n            case \"end\":\n              return _context26.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"_readDescriptor\",\n    value: function _readDescriptor(descriptorIdentifier, transactionId) {\n      var nativeDescriptor;\n      return _regeneratorRuntime.async(function _readDescriptor$(_context27) {\n        while (1) {\n          switch (_context27.prev = _context27.next) {\n            case 0:\n              if (!transactionId) {\n                transactionId = this._nextUniqueID();\n              }\n\n              _context27.next = 3;\n              return _regeneratorRuntime.awrap(this._callPromise(BleModule.readDescriptor(descriptorIdentifier, transactionId)));\n\n            case 3:\n              nativeDescriptor = _context27.sent;\n              return _context27.abrupt(\"return\", new Descriptor(nativeDescriptor, this));\n\n            case 5:\n            case \"end\":\n              return _context27.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"writeDescriptorForDevice\",\n    value: function writeDescriptorForDevice(deviceIdentifier, serviceUUID, characteristicUUID, descriptorUUID, valueBase64, transactionId) {\n      var nativeDescriptor;\n      return _regeneratorRuntime.async(function writeDescriptorForDevice$(_context28) {\n        while (1) {\n          switch (_context28.prev = _context28.next) {\n            case 0:\n              if (!transactionId) {\n                transactionId = this._nextUniqueID();\n              }\n\n              _context28.next = 3;\n              return _regeneratorRuntime.awrap(this._callPromise(BleModule.writeDescriptorForDevice(deviceIdentifier, serviceUUID, characteristicUUID, descriptorUUID, valueBase64, transactionId)));\n\n            case 3:\n              nativeDescriptor = _context28.sent;\n              return _context28.abrupt(\"return\", new Descriptor(nativeDescriptor, this));\n\n            case 5:\n            case \"end\":\n              return _context28.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"_writeDescriptorForService\",\n    value: function _writeDescriptorForService(serviceIdentifier, characteristicUUID, descriptorUUID, valueBase64, transactionId) {\n      var nativeDescriptor;\n      return _regeneratorRuntime.async(function _writeDescriptorForService$(_context29) {\n        while (1) {\n          switch (_context29.prev = _context29.next) {\n            case 0:\n              if (!transactionId) {\n                transactionId = this._nextUniqueID();\n              }\n\n              _context29.next = 3;\n              return _regeneratorRuntime.awrap(this._callPromise(BleModule.writeDescriptorForService(serviceIdentifier, characteristicUUID, descriptorUUID, valueBase64, transactionId)));\n\n            case 3:\n              nativeDescriptor = _context29.sent;\n              return _context29.abrupt(\"return\", new Descriptor(nativeDescriptor, this));\n\n            case 5:\n            case \"end\":\n              return _context29.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"_writeDescriptorForCharacteristic\",\n    value: function _writeDescriptorForCharacteristic(characteristicIdentifier, descriptorUUID, valueBase64, transactionId) {\n      var nativeDescriptor;\n      return _regeneratorRuntime.async(function _writeDescriptorForCharacteristic$(_context30) {\n        while (1) {\n          switch (_context30.prev = _context30.next) {\n            case 0:\n              if (!transactionId) {\n                transactionId = this._nextUniqueID();\n              }\n\n              _context30.next = 3;\n              return _regeneratorRuntime.awrap(this._callPromise(BleModule.writeDescriptorForCharacteristic(characteristicIdentifier, descriptorUUID, valueBase64, transactionId)));\n\n            case 3:\n              nativeDescriptor = _context30.sent;\n              return _context30.abrupt(\"return\", new Descriptor(nativeDescriptor, this));\n\n            case 5:\n            case \"end\":\n              return _context30.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"_writeDescriptor\",\n    value: function _writeDescriptor(descriptorIdentifier, valueBase64, transactionId) {\n      var nativeDescriptor;\n      return _regeneratorRuntime.async(function _writeDescriptor$(_context31) {\n        while (1) {\n          switch (_context31.prev = _context31.next) {\n            case 0:\n              if (!transactionId) {\n                transactionId = this._nextUniqueID();\n              }\n\n              _context31.next = 3;\n              return _regeneratorRuntime.awrap(this._callPromise(BleModule.writeDescriptor(descriptorIdentifier, valueBase64, transactionId)));\n\n            case 3:\n              nativeDescriptor = _context31.sent;\n              return _context31.abrupt(\"return\", new Descriptor(nativeDescriptor, this));\n\n            case 5:\n            case \"end\":\n              return _context31.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }]);\n\n  return BleManager;\n}();","map":{"version":3,"names":["Device","Service","Characteristic","Descriptor","State","LogLevel","ConnectionPriority","BleModule","EventEmitter","parseBleError","BleError","BleErrorCode","BleErrorCodeMessage","BleATTErrorCode","BleAndroidErrorCode","BleIOSErrorCode","BleManager","options","_eventEmitter","_uniqueId","_activePromises","_activeSubscriptions","restoreStateFunction","restoreStateIdentifier","_nextUniqueID","addListener","RestoreStateEvent","nativeRestoredState","connectedPeripherals","map","nativeDevice","_errorCodesToMessagesMapping","errorCodesToMessagesMapping","createClient","destroyedError","errorCode","BluetoothManagerDestroyed","attErrorCode","iosErrorCode","androidErrorCode","reason","id","remove","destroyClient","_scanEventSubscription","_destroySubscriptions","_destroyPromises","toString","promise","destroyPromise","Promise","resolve","reject","race","value","message","logLevel","setLogLevel","_callPromise","transactionId","cancelTransaction","enable","disable","state","listener","emitCurrentState","subscription","StateChangeEvent","wrappedSubscription","cancelled","then","currentState","UUIDs","stopDeviceScan","scanListener","error","ScanEvent","startDeviceScan","deviceIdentifier","connectionPriority","requestConnectionPriorityForDevice","readRSSIForDevice","mtu","requestMTUForDevice","deviceIdentifiers","devices","nativeDevices","serviceUUIDs","connectedDevices","connectToDevice","cancelDeviceConnection","disconnectionListener","DisconnectionEvent","isDeviceConnected","discoverAllServicesAndCharacteristicsForDevice","servicesForDevice","services","nativeService","serviceUUID","_handleCharacteristics","characteristicsForDevice","serviceIdentifier","characteristicsForService","characteristicsPromise","characteristics","nativeCharacteristic","characteristicUUID","_handleDescriptors","descriptorsForDevice","descriptorsForService","characteristicIdentifier","descriptorsForCharacteristic","descriptorsPromise","descriptors","nativeDescriptor","readCharacteristicForDevice","readCharacteristicForService","readCharacteristic","base64Value","writeCharacteristicForDevice","writeCharacteristicForService","writeCharacteristic","filledTransactionId","_handleMonitorCharacteristic","monitorCharacteristicForDevice","monitorCharacteristicForService","monitorCharacteristic","monitorPromise","monitorListener","characteristic","msgTransactionId","ReadEvent","descriptorUUID","readDescriptorForDevice","readDescriptorForService","readDescriptorForCharacteristic","descriptorIdentifier","readDescriptor","valueBase64","writeDescriptorForDevice","writeDescriptorForService","writeDescriptorForCharacteristic","writeDescriptor"],"sources":["C:/Users/ROBSONLUCASSILVEIRAM/Documents/tcc/node_modules/react-native-ble-plx/src/BleManager.js"],"sourcesContent":["// @flow\n'use strict'\n\nimport { Device } from './Device'\nimport { Service } from './Service'\nimport { Characteristic } from './Characteristic'\nimport { Descriptor } from './Descriptor'\nimport { State, LogLevel, type BleErrorCodeMessageMapping, ConnectionPriority } from './TypeDefinition'\nimport { BleModule, EventEmitter } from './BleModule'\nimport {\n  parseBleError,\n  BleError,\n  BleErrorCode,\n  BleErrorCodeMessage,\n  BleATTErrorCode,\n  BleAndroidErrorCode,\n  BleIOSErrorCode\n} from './BleError'\nimport type { NativeDevice, NativeCharacteristic, NativeDescriptor, NativeBleRestoredState } from './BleModule'\nimport type {\n  Subscription,\n  DeviceId,\n  Identifier,\n  UUID,\n  TransactionId,\n  Base64,\n  ScanOptions,\n  ConnectionOptions,\n  BleManagerOptions\n} from './TypeDefinition'\n\n/**\n *\n * BleManager is an entry point for react-native-ble-plx library. It provides all means to discover and work with\n * {@link Device} instances. It should be initialized only once with `new` keyword and method\n * {@link #blemanagerdestroy|destroy()} should be called on its instance when user wants to deallocate all resources.\n *\n * In case you want to properly support Background Mode, you should provide `restoreStateIdentifier` and\n * `restoreStateFunction` in {@link BleManagerOptions}.\n *\n * @example\n * const manager = new BleManager();\n * // ... work with BLE manager ...\n * manager.destroy();\n */\nexport class BleManager {\n  // Scan subscriptions\n  _scanEventSubscription: ?EventEmitter\n  // Listening to BleModule events\n  _eventEmitter: EventEmitter\n  // Unique identifier used to create internal transactionIds\n  _uniqueId: number\n  // Map of active promises with functions to forcibly cancel them\n  _activePromises: { [id: string]: (error: BleError) => void }\n  // Map of active subscriptions\n  _activeSubscriptions: { [id: string]: Subscription }\n\n  // Map of error codes to error messages\n  _errorCodesToMessagesMapping: BleErrorCodeMessageMapping\n\n  /**\n   * Creates an instance of {@link BleManager}.\n   */\n  constructor(options: BleManagerOptions = {}) {\n    this._eventEmitter = new EventEmitter(BleModule)\n    this._uniqueId = 0\n    this._activePromises = {}\n    this._activeSubscriptions = {}\n\n    const restoreStateFunction = options.restoreStateFunction\n    if (restoreStateFunction != null && options.restoreStateIdentifier != null) {\n      this._activeSubscriptions[this._nextUniqueID()] = this._eventEmitter.addListener(\n        BleModule.RestoreStateEvent,\n        (nativeRestoredState: NativeBleRestoredState) => {\n          if (nativeRestoredState == null) {\n            restoreStateFunction(null)\n            return\n          }\n          restoreStateFunction({\n            connectedPeripherals: nativeRestoredState.connectedPeripherals.map(\n              nativeDevice => new Device(nativeDevice, this)\n            )\n          })\n        }\n      )\n    }\n\n    this._errorCodesToMessagesMapping = options.errorCodesToMessagesMapping\n      ? options.errorCodesToMessagesMapping\n      : BleErrorCodeMessage\n\n    BleModule.createClient(options.restoreStateIdentifier || null)\n  }\n\n  /**\n   * Destroys all promises which are in progress.\n   * @private\n   */\n  _destroyPromises() {\n    const destroyedError = new BleError(\n      {\n        errorCode: BleErrorCode.BluetoothManagerDestroyed,\n        attErrorCode: (null: ?$Values<typeof BleATTErrorCode>),\n        iosErrorCode: (null: ?$Values<typeof BleIOSErrorCode>),\n        androidErrorCode: (null: ?$Values<typeof BleAndroidErrorCode>),\n        reason: (null: ?string)\n      },\n      this._errorCodesToMessagesMapping\n    )\n    for (const id in this._activePromises) {\n      this._activePromises[id](destroyedError)\n    }\n  }\n\n  /**\n   * Destroys all subscriptions.\n   * @private\n   */\n  _destroySubscriptions() {\n    for (const id in this._activeSubscriptions) {\n      this._activeSubscriptions[id].remove()\n    }\n  }\n\n  /**\n   * Destroys {@link BleManager} instance. A new instance needs to be created to continue working with\n   * this library. All operations which were in progress completes with\n   * {@link #bleerrorcodebluetoothmanagerdestroyed|BluetoothManagerDestroyed} error code.\n   */\n  destroy() {\n    // Destroy native module object\n    BleModule.destroyClient()\n\n    // Unsubscribe from any subscriptions\n    if (this._scanEventSubscription != null) {\n      this._scanEventSubscription.remove()\n      this._scanEventSubscription = null\n    }\n    this._destroySubscriptions()\n\n    // Destroy all promises\n    this._destroyPromises()\n  }\n\n  /**\n   * Generates new unique identifier to be used internally.\n   *\n   * @returns {string} New identifier.\n   * @private\n   */\n  _nextUniqueID(): string {\n    this._uniqueId += 1\n    return this._uniqueId.toString()\n  }\n\n  /**\n   * Calls promise and checks if it completed successfully\n   *\n   * @param {Promise<T>} promise Promise to be called\n   * @returns {Promise<T>} Value of called promise.\n   * @private\n   */\n  async _callPromise<T>(promise: Promise<T>): Promise<T> {\n    const id = this._nextUniqueID()\n    try {\n      const destroyPromise = new Promise((resolve, reject) => {\n        this._activePromises[id] = reject\n      })\n      const value = await Promise.race([destroyPromise, promise])\n      delete this._activePromises[id]\n      return value\n    } catch (error) {\n      delete this._activePromises[id]\n      throw parseBleError(error.message, this._errorCodesToMessagesMapping)\n    }\n  }\n\n  // Mark: Common ------------------------------------------------------------------------------------------------------\n\n  /**\n   * Sets new log level for native module's logging mechanism.\n   * @param {LogLevel} logLevel New log level to be set.\n   */\n  setLogLevel(logLevel: $Keys<typeof LogLevel>) {\n    BleModule.setLogLevel(logLevel)\n  }\n\n  /**\n   * Get current log level for native module's logging mechanism.\n   * @returns {Promise<LogLevel>} Current log level.\n   */\n  logLevel(): Promise<$Keys<typeof LogLevel>> {\n    return this._callPromise(BleModule.logLevel())\n  }\n\n  /**\n   * Cancels pending transaction.\n   *\n   * Few operations such as monitoring characteristic's value changes can be cancelled by a user. Basically every API\n   * entry which accepts `transactionId` allows to call `cancelTransaction` function. When cancelled operation is a\n   * promise or a callback which registers errors, {@link #bleerror|BleError} with error code\n   * {@link #bleerrorcodeoperationcancelled|OperationCancelled} will be emitted in that case. Cancelling transaction\n   * which doesn't exist is ignored.\n   *\n   * @example\n   * const transactionId = 'monitor_battery';\n   *\n   * // Monitor battery notifications\n   * manager.monitorCharacteristicForDevice(\n   *   device.id, '180F', '2A19',\n   *   (error, characteristic) => {\n   *   // Handle battery level changes...\n   * }, transactionId);\n   *\n   * // Cancel after specified amount of time\n   * setTimeout(() => manager.cancelTransaction(transactionId), 2000);\n   *\n   * @param {TransactionId} transactionId Id of pending transactions.\n   */\n  cancelTransaction(transactionId: TransactionId) {\n    BleModule.cancelTransaction(transactionId)\n  }\n\n  // Mark: Monitoring state --------------------------------------------------------------------------------------------\n\n  /**\n   * Enable Bluetooth. This function blocks until BLE is in PoweredOn state. [Android only]\n   *\n   * @param {?TransactionId} transactionId Transaction handle used to cancel operation\n   * @returns {Promise<BleManager>} Promise completes when state transition was successful.\n   */\n  async enable(transactionId: ?TransactionId): Promise<BleManager> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    await this._callPromise(BleModule.enable(transactionId))\n    return this\n  }\n\n  /**\n   * Disable Bluetooth. This function blocks until BLE is in PoweredOff state. [Android only]\n   *\n   * @param {?TransactionId} transactionId Transaction handle used to cancel operation\n   * @returns {Promise<BleManager>} Promise completes when state transition was successful.\n   */\n  async disable(transactionId: ?TransactionId): Promise<BleManager> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    await this._callPromise(BleModule.disable(transactionId))\n    return this\n  }\n\n  /**\n   * Current, global {@link State} of a {@link BleManager}. All APIs are working only when active state\n   * is \"PoweredOn\".\n   *\n   * @returns {Promise<State>} Promise which emits current state of BleManager.\n   */\n  state(): Promise<$Keys<typeof State>> {\n    return this._callPromise(BleModule.state())\n  }\n\n  /**\n   * Notifies about {@link State} changes of a {@link BleManager}.\n   *\n   * @example\n   * const subscription = this.manager.onStateChange((state) => {\n   *      if (state === 'PoweredOn') {\n   *          this.scanAndConnect();\n   *          subscription.remove();\n   *      }\n   *  }, true);\n   *\n   * @param {function(newState: State)} listener Callback which emits state changes of BLE Manager.\n   * Look at {@link State} for possible values.\n   * @param {boolean} [emitCurrentState=false] If true, current state will be emitted as well. Defaults to false.\n   *\n   * @returns {Subscription} Subscription on which `remove()` function can be called to unsubscribe.\n   */\n  onStateChange(listener: (newState: $Keys<typeof State>) => void, emitCurrentState: boolean = false): Subscription {\n    const subscription: Subscription = this._eventEmitter.addListener(BleModule.StateChangeEvent, listener)\n    const id = this._nextUniqueID()\n    var wrappedSubscription: Subscription\n\n    if (emitCurrentState) {\n      var cancelled = false\n      this._callPromise(this.state()).then(currentState => {\n        if (!cancelled) {\n          listener(currentState)\n        }\n      })\n\n      wrappedSubscription = {\n        remove: () => {\n          if (this._activeSubscriptions[id] != null) {\n            cancelled = true\n            delete this._activeSubscriptions[id]\n            subscription.remove()\n          }\n        }\n      }\n    } else {\n      wrappedSubscription = {\n        remove: () => {\n          if (this._activeSubscriptions[id] != null) {\n            delete this._activeSubscriptions[id]\n            subscription.remove()\n          }\n        }\n      }\n    }\n\n    this._activeSubscriptions[id] = wrappedSubscription\n    return wrappedSubscription\n  }\n\n  // Mark: Scanning ----------------------------------------------------------------------------------------------------\n\n  /**\n   * Starts device scanning. When previous scan is in progress it will be stopped before executing this command.\n   *\n   * @param {?Array<UUID>} UUIDs Array of strings containing {@link UUID}s of {@link Service}s which are registered in\n   * scanned {@link Device}. If `null` is passed, all available {@link Device}s will be scanned.\n   * @param {?ScanOptions} options Optional configuration for scanning operation.\n   * @param {function(error: ?BleError, scannedDevice: ?Device)} listener Function which will be called for every scanned\n   * {@link Device} (devices may be scanned multiple times). It's first argument is potential {@link Error} which is set\n   * to non `null` value when scanning failed. You have to start scanning process again if that happens. Second argument\n   * is a scanned {@link Device}.\n   */\n  startDeviceScan(\n    UUIDs: ?Array<UUID>,\n    options: ?ScanOptions,\n    listener: (error: ?BleError, scannedDevice: ?Device) => void\n  ) {\n    this.stopDeviceScan()\n    const scanListener = ([error, nativeDevice]: [?string, ?NativeDevice]) => {\n      listener(\n        error ? parseBleError(error, this._errorCodesToMessagesMapping) : null,\n        nativeDevice ? new Device(nativeDevice, this) : null\n      )\n    }\n    // $FlowFixMe: Flow cannot deduce EmitterSubscription type.\n    this._scanEventSubscription = this._eventEmitter.addListener(BleModule.ScanEvent, scanListener)\n    BleModule.startDeviceScan(UUIDs, options)\n  }\n\n  /**\n   * Stops {@link Device} scan if in progress.\n   */\n  stopDeviceScan() {\n    if (this._scanEventSubscription != null) {\n      this._scanEventSubscription.remove()\n      this._scanEventSubscription = null\n    }\n    BleModule.stopDeviceScan()\n  }\n\n  /**\n   * Request a connection parameter update. This functions may update connection parameters on Android API level 21 or\n   * above.\n   *\n   * @param {DeviceId} deviceIdentifier Device identifier.\n   * @param {ConnectionPriority} connectionPriority: Connection priority.\n   * @param {?TransactionId} transactionId Transaction handle used to cancel operation.\n   * @returns {Promise<Device>} Connected device.\n   */\n  async requestConnectionPriorityForDevice(\n    deviceIdentifier: DeviceId,\n    connectionPriority: $Values<typeof ConnectionPriority>,\n    transactionId: ?TransactionId\n  ): Promise<Device> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    const nativeDevice = await this._callPromise(\n      BleModule.requestConnectionPriorityForDevice(deviceIdentifier, connectionPriority, transactionId)\n    )\n    return new Device(nativeDevice, this)\n  }\n\n  /**\n   * Reads RSSI for connected device.\n   *\n   * @param {DeviceId} deviceIdentifier Device identifier.\n   * @param {?TransactionId} transactionId Transaction handle used to cancel operation\n   * @returns {Promise<Device>} Connected device with updated RSSI value.\n   */\n  async readRSSIForDevice(deviceIdentifier: DeviceId, transactionId: ?TransactionId): Promise<Device> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    const nativeDevice = await this._callPromise(BleModule.readRSSIForDevice(deviceIdentifier, transactionId))\n    return new Device(nativeDevice, this)\n  }\n\n  /**\n   * Request new MTU value for this device. This function currently is not doing anything\n   * on iOS platform as MTU exchange is done automatically.\n   * @param {DeviceId} deviceIdentifier Device identifier.\n   * @param {number} mtu New MTU to negotiate.\n   * @param {?TransactionId} transactionId Transaction handle used to cancel operation\n   * @returns {Promise<Device>} Device with updated MTU size. Default value is 23.\n   */\n  async requestMTUForDevice(deviceIdentifier: DeviceId, mtu: number, transactionId: ?TransactionId): Promise<Device> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    const nativeDevice = await this._callPromise(BleModule.requestMTUForDevice(deviceIdentifier, mtu, transactionId))\n    return new Device(nativeDevice, this)\n  }\n\n  // Mark: Connection management ---------------------------------------------------------------------------------------\n\n  /**\n   * Returns a list of known devices by their identifiers.\n   * @param {Array<DeviceId>} deviceIdentifiers List of device identifiers.\n   * @returns {Promise<Array<Device>>} List of known devices by their identifiers.\n   */\n  async devices(deviceIdentifiers: Array<DeviceId>): Promise<Array<Device>> {\n    const nativeDevices = await this._callPromise(BleModule.devices(deviceIdentifiers))\n    return nativeDevices.map((nativeDevice: NativeDevice) => {\n      return new Device(nativeDevice, this)\n    })\n  }\n\n  /**\n   * Returns a list of the peripherals (containing any of the specified services) currently connected to the system\n   * which have discovered services. Returned devices **may not be connected** to your application. Make sure to check\n   * if that's the case with function {@link #blemanagerisdeviceconnected|isDeviceConnected}.\n   * @param {Array<UUID>} serviceUUIDs List of service UUIDs. Device must contain at least one of them to be listed.\n   * @returns {Promise<Array<Device>>} List of known devices with discovered services as stated in the parameter.\n   */\n  async connectedDevices(serviceUUIDs: Array<UUID>): Promise<Array<Device>> {\n    const nativeDevices = await this._callPromise(BleModule.connectedDevices(serviceUUIDs))\n    return nativeDevices.map((nativeDevice: NativeDevice) => {\n      return new Device(nativeDevice, this)\n    })\n  }\n\n  // Mark: Connection management ---------------------------------------------------------------------------------------\n\n  /**\n   * Connects to {@link Device} with provided ID.\n   *\n   * @param {DeviceId} deviceIdentifier {@link Device} identifier.\n   * @param {?ConnectionOptions} options Platform specific options for connection establishment.\n   * @returns {Promise<Device>} Connected {@link Device} object if successful.\n   */\n  async connectToDevice(deviceIdentifier: DeviceId, options: ?ConnectionOptions): Promise<Device> {\n    const nativeDevice = await this._callPromise(BleModule.connectToDevice(deviceIdentifier, options))\n    return new Device(nativeDevice, this)\n  }\n\n  /**\n   * Disconnects from {@link Device} if it's connected or cancels pending connection.\n   *\n   * @param {DeviceId} deviceIdentifier {@link Device} identifier to be closed.\n   * @returns {Promise<Device>} Returns closed {@link Device} when operation is successful.\n   */\n  async cancelDeviceConnection(deviceIdentifier: DeviceId): Promise<Device> {\n    const nativeDevice = await this._callPromise(BleModule.cancelDeviceConnection(deviceIdentifier))\n    return new Device(nativeDevice, this)\n  }\n\n  /**\n   * Monitors if {@link Device} was disconnected due to any errors or connection problems.\n   *\n   * @param {DeviceId} deviceIdentifier {@link Device} identifier to be monitored.\n   * @param {function(error: ?BleError, device: Device)} listener - callback returning error as a reason of disconnection\n   * if available and {@link Device} object. If an error is null, that means the connection was terminated by\n   * {@link #blemanagercanceldeviceconnection|bleManager.cancelDeviceConnection()} call.\n   * @returns {Subscription} Subscription on which `remove()` function can be called to unsubscribe.\n   */\n  onDeviceDisconnected(deviceIdentifier: DeviceId, listener: (error: ?BleError, device: Device) => void): Subscription {\n    const disconnectionListener = ([error, nativeDevice]: [?string, NativeDevice]) => {\n      if (deviceIdentifier !== nativeDevice.id) return\n      listener(error ? parseBleError(error, this._errorCodesToMessagesMapping) : null, new Device(nativeDevice, this))\n    }\n\n    const subscription: Subscription = this._eventEmitter.addListener(\n      BleModule.DisconnectionEvent,\n      disconnectionListener\n    )\n\n    const id = this._nextUniqueID()\n    const wrappedSubscription = {\n      remove: () => {\n        if (this._activeSubscriptions[id] != null) {\n          delete this._activeSubscriptions[id]\n          subscription.remove()\n        }\n      }\n    }\n    this._activeSubscriptions[id] = wrappedSubscription\n    return wrappedSubscription\n  }\n\n  /**\n   * Check connection state of a {@link Device}.\n   *\n   * @param {DeviceId} deviceIdentifier {@link Device} identifier.\n   * @returns {Promise<boolean>} Promise which emits `true` if device is connected, and `false` otherwise.\n   */\n  isDeviceConnected(deviceIdentifier: DeviceId): Promise<boolean> {\n    return this._callPromise(BleModule.isDeviceConnected(deviceIdentifier))\n  }\n\n  // Mark: Discovery ---------------------------------------------------------------------------------------------------\n\n  /**\n   * Discovers all {@link Service}s,  {@link Characteristic}s and {@link Descriptor}s for {@link Device}.\n   *\n   * @param {DeviceId} deviceIdentifier {@link Device} identifier.\n   * @param {?TransactionId} transactionId Transaction handle used to cancel operation\n   * @returns {Promise<Device>} Promise which emits {@link Device} object if all available services and\n   * characteristics have been discovered.\n   */\n  async discoverAllServicesAndCharacteristicsForDevice(\n    deviceIdentifier: DeviceId,\n    transactionId: ?TransactionId\n  ): Promise<Device> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    const nativeDevice = await this._callPromise(\n      BleModule.discoverAllServicesAndCharacteristicsForDevice(deviceIdentifier, transactionId)\n    )\n    return new Device(nativeDevice, this)\n  }\n\n  // Mark: Service and characteristic getters --------------------------------------------------------------------------\n\n  /**\n   * List of discovered {@link Service}s for {@link Device}.\n   *\n   * @param {DeviceId} deviceIdentifier {@link Device} identifier.\n   * @returns {Promise<Array<Service>>} Promise which emits array of {@link Service} objects which are discovered for a\n   * {@link Device}.\n   */\n  async servicesForDevice(deviceIdentifier: DeviceId): Promise<Array<Service>> {\n    const services = await this._callPromise(BleModule.servicesForDevice(deviceIdentifier))\n    return services.map(nativeService => {\n      return new Service(nativeService, this)\n    })\n  }\n\n  /**\n   * List of discovered {@link Characteristic}s for given {@link Device} and {@link Service}.\n   *\n   * @param {DeviceId} deviceIdentifier {@link Device} identifier.\n   * @param {UUID} serviceUUID {@link Service} UUID.\n   * @returns {Promise<Array<Characteristic>>} Promise which emits array of {@link Characteristic} objects which are\n   * discovered for a {@link Device} in specified {@link Service}.\n   */\n  characteristicsForDevice(deviceIdentifier: DeviceId, serviceUUID: UUID): Promise<Array<Characteristic>> {\n    return this._handleCharacteristics(BleModule.characteristicsForDevice(deviceIdentifier, serviceUUID))\n  }\n\n  /**\n   * List of discovered {@link Characteristic}s for unique {@link Service}.\n   *\n   * @param {Identifier} serviceIdentifier {@link Service} ID.\n   * @returns {Promise<Array<Characteristic>>} Promise which emits array of {@link Characteristic} objects which are\n   * discovered in unique {@link Service}.\n   * @private\n   */\n  _characteristicsForService(serviceIdentifier: Identifier): Promise<Array<Characteristic>> {\n    return this._handleCharacteristics(BleModule.characteristicsForService(serviceIdentifier))\n  }\n\n  /**\n   * Common code for handling NativeCharacteristic fetches.\n   *\n   * @param {Promise<Array<NativeCharacteristic>>} characteristicsPromise Native characteristics.\n   * @returns {Promise<Array<Characteristic>>} Promise which emits array of {@link Characteristic} objects which are\n   * discovered in unique {@link Service}.\n   * @private\n   */\n  async _handleCharacteristics(\n    characteristicsPromise: Promise<Array<NativeCharacteristic>>\n  ): Promise<Array<Characteristic>> {\n    const characteristics = await this._callPromise(characteristicsPromise)\n    return characteristics.map(nativeCharacteristic => {\n      return new Characteristic(nativeCharacteristic, this)\n    })\n  }\n\n  /**\n   * List of discovered {@link Descriptor}s for given {@link Device}, {@link Service} and {@link Characteristic}.\n   *\n   * @param {DeviceId} deviceIdentifier {@link Device} identifier.\n   * @param {UUID} serviceUUID {@link Service} UUID.\n   * @param {UUID} characteristicUUID {@link Characteristic} UUID.\n   * @returns {Promise<Array<Descriptor>>} Promise which emits array of {@link Descriptor} objects which are\n   * discovered for a {@link Device}, {@link Service} in specified {@link Characteristic}.\n   */\n  descriptorsForDevice(\n    deviceIdentifier: DeviceId,\n    serviceUUID: UUID,\n    characteristicUUID: UUID\n  ): Promise<Array<Descriptor>> {\n    return this._handleDescriptors(BleModule.descriptorsForDevice(deviceIdentifier, serviceUUID, characteristicUUID))\n  }\n\n  /**\n   * List of discovered {@link Descriptor}s for given {@link Service} and {@link Characteristic}.\n   *\n   * @param {Identifier} serviceIdentifier {@link Service} identifier.\n   * @param {UUID} characteristicUUID {@link Characteristic} UUID.\n   * @returns {Promise<Array<Descriptor>>} Promise which emits array of {@link Descriptor} objects which are\n   * discovered for a {@link Service} in specified {@link Characteristic}.\n   * @private\n   */\n  _descriptorsForService(serviceIdentifier: Identifier, characteristicUUID: UUID): Promise<Array<Descriptor>> {\n    return this._handleDescriptors(BleModule.descriptorsForService(serviceIdentifier, characteristicUUID))\n  }\n\n  /**\n   * List of discovered {@link Descriptor}s for given {@link Characteristic}.\n   *\n   * @param {Identifier} characteristicIdentifier {@link Characteristic} identifier.\n   * @returns {Promise<Array<Descriptor>>} Promise which emits array of {@link Descriptor} objects which are\n   * discovered in specified {@link Characteristic}.\n   * @private\n   */\n  _descriptorsForCharacteristic(characteristicIdentifier: Identifier): Promise<Array<Descriptor>> {\n    return this._handleDescriptors(BleModule.descriptorsForCharacteristic(characteristicIdentifier))\n  }\n\n  /**\n   *  Common code for handling NativeDescriptor fetches.\n   * @param {Promise<Array<NativeDescriptor>>} descriptorsPromise Native descriptors.\n   * @returns {Promise<Array<Descriptor>>} Promise which emits array of {@link Descriptor} objects which are\n   * discovered in unique {@link Characteristic}.\n   * @private\n   */\n  async _handleDescriptors(descriptorsPromise: Promise<Array<NativeDescriptor>>): Promise<Array<Descriptor>> {\n    const descriptors = await this._callPromise(descriptorsPromise)\n    return descriptors.map(nativeDescriptor => {\n      return new Descriptor(nativeDescriptor, this)\n    })\n  }\n\n  // Mark: Characteristics operations ----------------------------------------------------------------------------------\n\n  /**\n   * Read {@link Characteristic} value.\n   *\n   * @param {DeviceId} deviceIdentifier {@link Device} identifier.\n   * @param {UUID} serviceUUID {@link Service} UUID.\n   * @param {UUID} characteristicUUID {@link Characteristic} UUID.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|cancelTransaction()} function.\n   * @returns {Promise<Characteristic>} Promise which emits first {@link Characteristic} object matching specified\n   * UUID paths. Latest value of {@link Characteristic} will be stored inside returned object.\n   */\n  async readCharacteristicForDevice(\n    deviceIdentifier: DeviceId,\n    serviceUUID: UUID,\n    characteristicUUID: UUID,\n    transactionId: ?TransactionId\n  ): Promise<Characteristic> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    const nativeCharacteristic = await this._callPromise(\n      BleModule.readCharacteristicForDevice(deviceIdentifier, serviceUUID, characteristicUUID, transactionId)\n    )\n    return new Characteristic(nativeCharacteristic, this)\n  }\n\n  /**\n   * Read {@link Characteristic} value.\n   *\n   * @param {Identifier} serviceIdentifier {@link Service} ID.\n   * @param {UUID} characteristicUUID {@link Characteristic} UUID.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|cancelTransaction()} function.\n   * @returns {Promise<Characteristic>} Promise which emits first {@link Characteristic} object matching specified\n   * UUID paths. Latest value of {@link Characteristic} will be stored inside returned object.\n   * @private\n   */\n  async _readCharacteristicForService(\n    serviceIdentifier: Identifier,\n    characteristicUUID: UUID,\n    transactionId: ?TransactionId\n  ): Promise<Characteristic> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    const nativeCharacteristic = await this._callPromise(\n      BleModule.readCharacteristicForService(serviceIdentifier, characteristicUUID, transactionId)\n    )\n    return new Characteristic(nativeCharacteristic, this)\n  }\n\n  /**\n   * Read {@link Characteristic} value.\n   *\n   * @param {Identifier} characteristicIdentifier {@link Characteristic} ID.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|cancelTransaction()} function.\n   * @returns {Promise<Characteristic>} Promise which emits first {@link Characteristic} object matching specified ID.\n   * Latest value of {@link Characteristic} will be stored inside returned object.\n   * @private\n   */\n  async _readCharacteristic(\n    characteristicIdentifier: Identifier,\n    transactionId: ?TransactionId\n  ): Promise<Characteristic> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    const nativeCharacteristic = await this._callPromise(\n      BleModule.readCharacteristic(characteristicIdentifier, transactionId)\n    )\n    return new Characteristic(nativeCharacteristic, this)\n  }\n\n  /**\n   * Write {@link Characteristic} value with response.\n   *\n   * @param {DeviceId} deviceIdentifier {@link Device} identifier.\n   * @param {UUID} serviceUUID {@link Service} UUID.\n   * @param {UUID} characteristicUUID {@link Characteristic} UUID.\n   * @param {Base64} base64Value Value in Base64 format.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|cancelTransaction()} function.\n   * @returns {Promise<Characteristic>} Promise which emits first {@link Characteristic} object matching specified\n   * UUID paths. Latest value of characteristic may not be stored inside returned object.\n   */\n  async writeCharacteristicWithResponseForDevice(\n    deviceIdentifier: DeviceId,\n    serviceUUID: UUID,\n    characteristicUUID: UUID,\n    base64Value: Base64,\n    transactionId: ?TransactionId\n  ): Promise<Characteristic> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    const nativeCharacteristic = await this._callPromise(\n      BleModule.writeCharacteristicForDevice(\n        deviceIdentifier,\n        serviceUUID,\n        characteristicUUID,\n        base64Value,\n        true,\n        transactionId\n      )\n    )\n    return new Characteristic(nativeCharacteristic, this)\n  }\n\n  /**\n   * Write {@link Characteristic} value with response.\n   *\n   * @param {Identifier} serviceIdentifier {@link Service} ID.\n   * @param {UUID} characteristicUUID {@link Characteristic} UUID.\n   * @param {Base64} base64Value Value in Base64 format.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|cancelTransaction()} function.\n   * @returns {Promise<Characteristic>} Promise which emits first {@link Characteristic} object matching specified\n   * UUID paths. Latest value of characteristic may not be stored inside returned object.\n   * @private\n   */\n  async _writeCharacteristicWithResponseForService(\n    serviceIdentifier: Identifier,\n    characteristicUUID: UUID,\n    base64Value: Base64,\n    transactionId: ?TransactionId\n  ): Promise<Characteristic> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    const nativeCharacteristic = await this._callPromise(\n      BleModule.writeCharacteristicForService(serviceIdentifier, characteristicUUID, base64Value, true, transactionId)\n    )\n    return new Characteristic(nativeCharacteristic, this)\n  }\n\n  /**\n   * Write {@link Characteristic} value with response.\n   *\n   * @param {Identifier} characteristicIdentifier {@link Characteristic} ID.\n   * @param {Base64} base64Value Value in Base64 format.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|cancelTransaction()} function.\n   * @returns {Promise<Characteristic>} Promise which emits first {@link Characteristic} object matching specified ID.\n   * Latest value of characteristic may not be stored inside returned object.\n   * @private\n   */\n  async _writeCharacteristicWithResponse(\n    characteristicIdentifier: Identifier,\n    base64Value: Base64,\n    transactionId: ?TransactionId\n  ) {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    const nativeCharacteristic = await this._callPromise(\n      BleModule.writeCharacteristic(characteristicIdentifier, base64Value, true, transactionId)\n    )\n    return new Characteristic(nativeCharacteristic, this)\n  }\n\n  /**\n   * Write {@link Characteristic} value without response.\n   *\n   * @param {DeviceId} deviceIdentifier {@link Device} identifier.\n   * @param {UUID} serviceUUID {@link Service} UUID.\n   * @param {UUID} characteristicUUID {@link Characteristic} UUID.\n   * @param {Base64} base64Value Value in Base64 format.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|cancelTransaction()} function.\n   * @returns {Promise<Characteristic>} Promise which emits first {@link Characteristic} object matching specified\n   * UUID paths. Latest value of characteristic may not be stored inside returned object.\n   */\n  async writeCharacteristicWithoutResponseForDevice(\n    deviceIdentifier: DeviceId,\n    serviceUUID: UUID,\n    characteristicUUID: UUID,\n    base64Value: Base64,\n    transactionId: ?TransactionId\n  ): Promise<Characteristic> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    const nativeCharacteristic = await this._callPromise(\n      BleModule.writeCharacteristicForDevice(\n        deviceIdentifier,\n        serviceUUID,\n        characteristicUUID,\n        base64Value,\n        false,\n        transactionId\n      )\n    )\n    return new Characteristic(nativeCharacteristic, this)\n  }\n\n  /**\n   * Write {@link Characteristic} value without response.\n   *\n   * @param {Identifier} serviceIdentifier {@link Service} ID.\n   * @param {UUID} characteristicUUID {@link Characteristic} UUID.\n   * @param {Base64} base64Value Value in Base64 format.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|cancelTransaction()} function.\n   * @returns {Promise<Characteristic>} Promise which emits first {@link Characteristic} object matching specified\n   * UUID paths. Latest value of characteristic may not be stored inside returned object.\n   * @private\n   */\n  async _writeCharacteristicWithoutResponseForService(\n    serviceIdentifier: Identifier,\n    characteristicUUID: UUID,\n    base64Value: Base64,\n    transactionId: ?TransactionId\n  ): Promise<Characteristic> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    const nativeCharacteristic = await this._callPromise(\n      BleModule.writeCharacteristicForService(serviceIdentifier, characteristicUUID, base64Value, false, transactionId)\n    )\n    return new Characteristic(nativeCharacteristic, this)\n  }\n\n  /**\n   * Write {@link Characteristic} value without response.\n   *\n   * @param {Identifier} characteristicIdentifier {@link Characteristic} UUID.\n   * @param {Base64} base64Value Value in Base64 format.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|cancelTransaction()} function.\n   * @returns {Promise<Characteristic>} Promise which emits first {@link Characteristic} object matching specified ID.\n   * Latest value of characteristic may not be stored inside returned object.\n   * @private\n   */\n  async _writeCharacteristicWithoutResponse(\n    characteristicIdentifier: Identifier,\n    base64Value: Base64,\n    transactionId: ?TransactionId\n  ): Promise<Characteristic> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    const nativeCharacteristic = await this._callPromise(\n      BleModule.writeCharacteristic(characteristicIdentifier, base64Value, false, transactionId)\n    )\n    return new Characteristic(nativeCharacteristic, this)\n  }\n\n  /**\n   * Monitor value changes of a {@link Characteristic}. If notifications are enabled they will be used\n   * in favour of indications.\n   *\n   * @param {DeviceId} deviceIdentifier {@link Device} identifier.\n   * @param {UUID} serviceUUID {@link Service} UUID.\n   * @param {UUID} characteristicUUID {@link Characteristic} UUID.\n   * @param {function(error: ?BleError, characteristic: ?Characteristic)} listener - callback which emits\n   * {@link Characteristic} objects with modified value for each notification.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|cancelTransaction()} function.\n   * @returns {Subscription} Subscription on which `remove()` function can be called to unsubscribe.\n   */\n  monitorCharacteristicForDevice(\n    deviceIdentifier: DeviceId,\n    serviceUUID: UUID,\n    characteristicUUID: UUID,\n    listener: (error: ?BleError, characteristic: ?Characteristic) => void,\n    transactionId: ?TransactionId\n  ): Subscription {\n    const filledTransactionId = transactionId || this._nextUniqueID()\n    return this._handleMonitorCharacteristic(\n      BleModule.monitorCharacteristicForDevice(deviceIdentifier, serviceUUID, characteristicUUID, filledTransactionId),\n      filledTransactionId,\n      listener\n    )\n  }\n\n  /**\n   * Monitor value changes of a {@link Characteristic}. If notifications are enabled they will be used\n   * in favour of indications.\n   *\n   * @param {Identifier} serviceIdentifier {@link Service} ID.\n   * @param {UUID} characteristicUUID {@link Characteristic} UUID.\n   * @param {function(error: ?BleError, characteristic: ?Characteristic)} listener - callback which emits\n   * {@link Characteristic} objects with modified value for each notification.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|cancelTransaction()} function.\n   * @returns {Subscription} Subscription on which `remove()` function can be called to unsubscribe.\n   * @private\n   */\n  _monitorCharacteristicForService(\n    serviceIdentifier: Identifier,\n    characteristicUUID: UUID,\n    listener: (error: ?BleError, characteristic: ?Characteristic) => void,\n    transactionId: ?TransactionId\n  ): Subscription {\n    const filledTransactionId = transactionId || this._nextUniqueID()\n    return this._handleMonitorCharacteristic(\n      BleModule.monitorCharacteristicForService(serviceIdentifier, characteristicUUID, filledTransactionId),\n      filledTransactionId,\n      listener\n    )\n  }\n\n  /**\n   * Monitor value changes of a {@link Characteristic}. If notifications are enabled they will be used\n   * in favour of indications.\n   *\n   * @param {Identifier} characteristicIdentifier - {@link Characteristic} ID.\n   * @param {function(error: ?BleError, characteristic: ?Characteristic)} listener - callback which emits\n   * {@link Characteristic} objects with modified value for each notification.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|cancelTransaction()} function.\n   * @returns {Subscription} Subscription on which `remove()` function can be called to unsubscribe.\n   * @private\n   */\n  _monitorCharacteristic(\n    characteristicIdentifier: Identifier,\n    listener: (error: ?BleError, characteristic: ?Characteristic) => void,\n    transactionId: ?TransactionId\n  ): Subscription {\n    const filledTransactionId = transactionId || this._nextUniqueID()\n    return this._handleMonitorCharacteristic(\n      BleModule.monitorCharacteristic(characteristicIdentifier, filledTransactionId),\n      filledTransactionId,\n      listener\n    )\n  }\n\n  /**\n   * Common code to handle characteristic monitoring.\n   *\n   * @param {Promise<void>} monitorPromise Characteristic monitoring promise\n   * @param {TransactionId} transactionId TransactionId of passed promise\n   * @param {function(error: ?BleError, characteristic: ?Characteristic)} listener - callback which emits\n   * {@link Characteristic} objects with modified value for each notification.\n   * @returns {Subscription} Subscription on which `remove()` function can be called to unsubscribe.\n   * @private\n   */\n  _handleMonitorCharacteristic(\n    monitorPromise: Promise<void>,\n    transactionId: TransactionId,\n    listener: (error: ?BleError, characteristic: ?Characteristic) => void\n  ): Subscription {\n    const monitorListener = ([error, characteristic, msgTransactionId]: [\n      ?string,\n      NativeCharacteristic,\n      TransactionId\n    ]) => {\n      if (transactionId !== msgTransactionId) return\n      if (error) {\n        listener(parseBleError(error, this._errorCodesToMessagesMapping), null)\n        return\n      }\n      listener(null, new Characteristic(characteristic, this))\n    }\n\n    const subscription: Subscription = this._eventEmitter.addListener(BleModule.ReadEvent, monitorListener)\n\n    const id = this._nextUniqueID()\n    const wrappedSubscription: Subscription = {\n      remove: () => {\n        if (this._activeSubscriptions[id] != null) {\n          delete this._activeSubscriptions[id]\n          subscription.remove()\n        }\n      }\n    }\n    this._activeSubscriptions[id] = wrappedSubscription\n\n    this._callPromise(monitorPromise).then(\n      () => {\n        wrappedSubscription.remove()\n      },\n      (error: BleError) => {\n        listener(error, null)\n        wrappedSubscription.remove()\n      }\n    )\n\n    return {\n      remove: () => {\n        BleModule.cancelTransaction(transactionId)\n      }\n    }\n  }\n\n  // Mark: Descriptors operations ----------------------------------------------------------------------------------\n\n  /**\n   * Read {@link Descriptor} value.\n   *\n   * @param {DeviceId} deviceIdentifier {@link Device} identifier.\n   * @param {UUID} serviceUUID {@link Service} UUID.\n   * @param {UUID} characteristicUUID {@link Characteristic} UUID.\n   * @param {UUID} descriptorUUID {@link Descriptor} UUID.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|cancelTransaction()} function.\n   * @returns {Promise<Descriptor>} Promise which emits first {@link Descriptor} object matching specified\n   * UUID paths. Latest value of {@link Descriptor} will be stored inside returned object.\n   */\n  async readDescriptorForDevice(\n    deviceIdentifier: DeviceId,\n    serviceUUID: UUID,\n    characteristicUUID: UUID,\n    descriptorUUID: UUID,\n    transactionId: ?TransactionId\n  ): Promise<Descriptor> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    const nativeDescriptor = await this._callPromise(\n      BleModule.readDescriptorForDevice(\n        deviceIdentifier,\n        serviceUUID,\n        characteristicUUID,\n        descriptorUUID,\n        transactionId\n      )\n    )\n    return new Descriptor(nativeDescriptor, this)\n  }\n\n  /**\n   * Read {@link Descriptor} value.\n   *\n   * @param {Identifier} serviceIdentifier {@link Service} identifier.\n   * @param {UUID} characteristicUUID {@link Characteristic} UUID.\n   * @param {UUID} descriptorUUID {@link Descriptor} UUID.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|cancelTransaction()} function.\n   * @returns {Promise<Descriptor>} Promise which emits first {@link Descriptor} object matching specified\n   * UUID paths. Latest value of {@link Descriptor} will be stored inside returned object.\n   * @private\n   */\n  async _readDescriptorForService(\n    serviceIdentifier: Identifier,\n    characteristicUUID: UUID,\n    descriptorUUID: UUID,\n    transactionId: ?TransactionId\n  ): Promise<Descriptor> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    const nativeDescriptor = await this._callPromise(\n      BleModule.readDescriptorForService(serviceIdentifier, characteristicUUID, descriptorUUID, transactionId)\n    )\n    return new Descriptor(nativeDescriptor, this)\n  }\n\n  /**\n   * Read {@link Descriptor} value.\n   *\n   * @param {Identifier} characteristicIdentifier {@link Characteristic} identifier.\n   * @param {UUID} descriptorUUID {@link Descriptor} UUID.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|cancelTransaction()} function.\n   * @returns {Promise<Descriptor>} Promise which emits first {@link Descriptor} object matching specified\n   * UUID paths. Latest value of {@link Descriptor} will be stored inside returned object.\n   * @private\n   */\n  async _readDescriptorForCharacteristic(\n    characteristicIdentifier: Identifier,\n    descriptorUUID: UUID,\n    transactionId: ?TransactionId\n  ): Promise<Descriptor> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    const nativeDescriptor = await this._callPromise(\n      BleModule.readDescriptorForCharacteristic(characteristicIdentifier, descriptorUUID, transactionId)\n    )\n    return new Descriptor(nativeDescriptor, this)\n  }\n\n  /**\n   * Read {@link Descriptor} value.\n   *\n   * @param {Identifier} descriptorIdentifier {@link Descriptor} identifier.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|cancelTransaction()} function.\n   * @returns {Promise<Descriptor>} Promise which emits first {@link Descriptor} object matching specified\n   * UUID paths. Latest value of {@link Descriptor} will be stored inside returned object.\n   * @private\n   */\n  async _readDescriptor(descriptorIdentifier: Identifier, transactionId: ?TransactionId): Promise<Descriptor> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    const nativeDescriptor = await this._callPromise(BleModule.readDescriptor(descriptorIdentifier, transactionId))\n    return new Descriptor(nativeDescriptor, this)\n  }\n\n  /**\n   * Write {@link Descriptor} value.\n   *\n   * @param {DeviceId} deviceIdentifier Connected device identifier\n   * @param {UUID} serviceUUID Service UUID\n   * @param {UUID} characteristicUUID Characteristic UUID\n   * @param {UUID} descriptorUUID Descriptor UUID\n   * @param {Base64} valueBase64 Value to be set coded in Base64\n   * @param {?TransactionId} transactionId Transaction handle used to cancel operation\n   * @returns {Promise<Descriptor>} Descriptor which saved passed value\n   */\n  async writeDescriptorForDevice(\n    deviceIdentifier: DeviceId,\n    serviceUUID: UUID,\n    characteristicUUID: UUID,\n    descriptorUUID: UUID,\n    valueBase64: Base64,\n    transactionId: ?TransactionId\n  ): Promise<Descriptor> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    const nativeDescriptor = await this._callPromise(\n      BleModule.writeDescriptorForDevice(\n        deviceIdentifier,\n        serviceUUID,\n        characteristicUUID,\n        descriptorUUID,\n        valueBase64,\n        transactionId\n      )\n    )\n    return new Descriptor(nativeDescriptor, this)\n  }\n\n  /**\n   * Write {@link Descriptor} value.\n   *\n   * @param {Identifier} serviceIdentifier Service identifier\n   * @param {UUID} characteristicUUID Characteristic UUID\n   * @param {UUID} descriptorUUID Descriptor UUID\n   * @param {Base64} valueBase64 Value to be set coded in Base64\n   * @param {?TransactionId} transactionId Transaction handle used to cancel operation\n   * @returns {Promise<Descriptor>} Descriptor which saved passed value\n   * @private\n   */\n  async _writeDescriptorForService(\n    serviceIdentifier: Identifier,\n    characteristicUUID: UUID,\n    descriptorUUID: UUID,\n    valueBase64: Base64,\n    transactionId: ?TransactionId\n  ): Promise<Descriptor> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    const nativeDescriptor = await this._callPromise(\n      BleModule.writeDescriptorForService(\n        serviceIdentifier,\n        characteristicUUID,\n        descriptorUUID,\n        valueBase64,\n        transactionId\n      )\n    )\n    return new Descriptor(nativeDescriptor, this)\n  }\n\n  /**\n   * Write {@link Descriptor} value.\n   *\n   * @param {Identifier} characteristicIdentifier Characteristic identifier\n   * @param {UUID} descriptorUUID Descriptor UUID\n   * @param {Base64} valueBase64 Value to be set coded in Base64\n   * @param {?TransactionId} transactionId Transaction handle used to cancel operation\n   * @returns {Promise<Descriptor>} Descriptor which saved passed value\n   * @private\n   */\n  async _writeDescriptorForCharacteristic(\n    characteristicIdentifier: Identifier,\n    descriptorUUID: UUID,\n    valueBase64: Base64,\n    transactionId: ?TransactionId\n  ): Promise<Descriptor> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    const nativeDescriptor = await this._callPromise(\n      BleModule.writeDescriptorForCharacteristic(characteristicIdentifier, descriptorUUID, valueBase64, transactionId)\n    )\n    return new Descriptor(nativeDescriptor, this)\n  }\n\n  /**\n   * Write {@link Descriptor} value.\n   *\n   * @param {Identifier} descriptorIdentifier Descriptor identifier\n   * @param {Base64} valueBase64 Value to be set coded in Base64\n   * @param {?TransactionId} transactionId Transaction handle used to cancel operation\n   * @returns {Promise<Descriptor>} Descriptor which saved passed value\n   * @private\n   */\n  async _writeDescriptor(\n    descriptorIdentifier: Identifier,\n    valueBase64: Base64,\n    transactionId: ?TransactionId\n  ): Promise<Descriptor> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    const nativeDescriptor = await this._callPromise(\n      BleModule.writeDescriptor(descriptorIdentifier, valueBase64, transactionId)\n    )\n    return new Descriptor(nativeDescriptor, this)\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}